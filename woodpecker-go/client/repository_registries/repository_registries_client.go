// Code generated by go-swagger; DO NOT EDIT.

package repository_registries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository registries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new repository registries API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new repository registries API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for repository registries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteReposRepoIDRegistryRegistry(params *DeleteReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*DeleteReposRepoIDRegistryRegistryNoContent, error)

	GetReposRepoIDRegistry(params *GetReposRepoIDRegistryParams, opts ...ClientOption) (*GetReposRepoIDRegistryOK, error)

	GetReposRepoIDRegistryRegistry(params *GetReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*GetReposRepoIDRegistryRegistryOK, error)

	PatchReposRepoIDRegistryRegistry(params *PatchReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*PatchReposRepoIDRegistryRegistryOK, error)

	PostReposRepoIDRegistry(params *PostReposRepoIDRegistryParams, opts ...ClientOption) (*PostReposRepoIDRegistryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteReposRepoIDRegistryRegistry deletes a registry by name
*/
func (a *Client) DeleteReposRepoIDRegistryRegistry(params *DeleteReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*DeleteReposRepoIDRegistryRegistryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReposRepoIDRegistryRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReposRepoIDRegistryRegistry",
		Method:             "DELETE",
		PathPattern:        "/repos/{repo_id}/registry/{registry}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReposRepoIDRegistryRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReposRepoIDRegistryRegistryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteReposRepoIDRegistryRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDRegistry lists registries
*/
func (a *Client) GetReposRepoIDRegistry(params *GetReposRepoIDRegistryParams, opts ...ClientOption) (*GetReposRepoIDRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDRegistry",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDRegistryRegistry gets a registry by name
*/
func (a *Client) GetReposRepoIDRegistryRegistry(params *GetReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*GetReposRepoIDRegistryRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDRegistryRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDRegistryRegistry",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/registry/{registry}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDRegistryRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDRegistryRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDRegistryRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchReposRepoIDRegistryRegistry updates a registry by name
*/
func (a *Client) PatchReposRepoIDRegistryRegistry(params *PatchReposRepoIDRegistryRegistryParams, opts ...ClientOption) (*PatchReposRepoIDRegistryRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReposRepoIDRegistryRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchReposRepoIDRegistryRegistry",
		Method:             "PATCH",
		PathPattern:        "/repos/{repo_id}/registry/{registry}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchReposRepoIDRegistryRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchReposRepoIDRegistryRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchReposRepoIDRegistryRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDRegistry creates a registry
*/
func (a *Client) PostReposRepoIDRegistry(params *PostReposRepoIDRegistryParams, opts ...ClientOption) (*PostReposRepoIDRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDRegistry",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/registry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDRegistryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDRegistry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
