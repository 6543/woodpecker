// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostLogLevelReader is a Reader for the PostLogLevel structure.
type PostLogLevelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLogLevelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostLogLevelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /log-level] PostLogLevel", response, response.Code())
	}
}

// NewPostLogLevelOK creates a PostLogLevelOK with default headers values
func NewPostLogLevelOK() *PostLogLevelOK {
	return &PostLogLevelOK{}
}

/*
PostLogLevelOK describes a response with status code 200, with default header values.

OK
*/
type PostLogLevelOK struct {
	Payload *PostLogLevelOKBody
}

// IsSuccess returns true when this post log level o k response has a 2xx status code
func (o *PostLogLevelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post log level o k response has a 3xx status code
func (o *PostLogLevelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post log level o k response has a 4xx status code
func (o *PostLogLevelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post log level o k response has a 5xx status code
func (o *PostLogLevelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post log level o k response a status code equal to that given
func (o *PostLogLevelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post log level o k response
func (o *PostLogLevelOK) Code() int {
	return 200
}

func (o *PostLogLevelOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log-level][%d] postLogLevelOK %s", 200, payload)
}

func (o *PostLogLevelOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /log-level][%d] postLogLevelOK %s", 200, payload)
}

func (o *PostLogLevelOK) GetPayload() *PostLogLevelOKBody {
	return o.Payload
}

func (o *PostLogLevelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostLogLevelOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostLogLevelBody post log level body
swagger:model PostLogLevelBody
*/
type PostLogLevelBody struct {
	PostLogLevelParamsBodyAllOf0

	// log level
	LogLevel string `json:"log-level,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostLogLevelBody) UnmarshalJSON(raw []byte) error {
	// PostLogLevelParamsBodyAO0
	var postLogLevelParamsBodyAO0 PostLogLevelParamsBodyAllOf0
	if err := swag.ReadJSON(raw, &postLogLevelParamsBodyAO0); err != nil {
		return err
	}
	o.PostLogLevelParamsBodyAllOf0 = postLogLevelParamsBodyAO0

	// PostLogLevelParamsBodyAO1
	var dataPostLogLevelParamsBodyAO1 struct {
		LogLevel string `json:"log-level,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostLogLevelParamsBodyAO1); err != nil {
		return err
	}

	o.LogLevel = dataPostLogLevelParamsBodyAO1.LogLevel

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostLogLevelBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postLogLevelParamsBodyAO0, err := swag.WriteJSON(o.PostLogLevelParamsBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postLogLevelParamsBodyAO0)
	var dataPostLogLevelParamsBodyAO1 struct {
		LogLevel string `json:"log-level,omitempty"`
	}

	dataPostLogLevelParamsBodyAO1.LogLevel = o.LogLevel

	jsonDataPostLogLevelParamsBodyAO1, errPostLogLevelParamsBodyAO1 := swag.WriteJSON(dataPostLogLevelParamsBodyAO1)
	if errPostLogLevelParamsBodyAO1 != nil {
		return nil, errPostLogLevelParamsBodyAO1
	}
	_parts = append(_parts, jsonDataPostLogLevelParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post log level body
func (o *PostLogLevelBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PostLogLevelParamsBodyAllOf0

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post log level body based on the context it is used
func (o *PostLogLevelBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PostLogLevelParamsBodyAllOf0
	if err := o.PostLogLevelParamsBodyAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostLogLevelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLogLevelBody) UnmarshalBinary(b []byte) error {
	var res PostLogLevelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostLogLevelOKBody post log level o k body
swagger:model PostLogLevelOKBody
*/
type PostLogLevelOKBody struct {
	PostLogLevelOKBodyAllOf0

	// log level
	LogLevel string `json:"log-level,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostLogLevelOKBody) UnmarshalJSON(raw []byte) error {
	// PostLogLevelOKBodyAO0
	var postLogLevelOKBodyAO0 PostLogLevelOKBodyAllOf0
	if err := swag.ReadJSON(raw, &postLogLevelOKBodyAO0); err != nil {
		return err
	}
	o.PostLogLevelOKBodyAllOf0 = postLogLevelOKBodyAO0

	// PostLogLevelOKBodyAO1
	var dataPostLogLevelOKBodyAO1 struct {
		LogLevel string `json:"log-level,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostLogLevelOKBodyAO1); err != nil {
		return err
	}

	o.LogLevel = dataPostLogLevelOKBodyAO1.LogLevel

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostLogLevelOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postLogLevelOKBodyAO0, err := swag.WriteJSON(o.PostLogLevelOKBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postLogLevelOKBodyAO0)
	var dataPostLogLevelOKBodyAO1 struct {
		LogLevel string `json:"log-level,omitempty"`
	}

	dataPostLogLevelOKBodyAO1.LogLevel = o.LogLevel

	jsonDataPostLogLevelOKBodyAO1, errPostLogLevelOKBodyAO1 := swag.WriteJSON(dataPostLogLevelOKBodyAO1)
	if errPostLogLevelOKBodyAO1 != nil {
		return nil, errPostLogLevelOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostLogLevelOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post log level o k body
func (o *PostLogLevelOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PostLogLevelOKBodyAllOf0

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this post log level o k body based on the context it is used
func (o *PostLogLevelOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PostLogLevelOKBodyAllOf0
	if err := o.PostLogLevelOKBodyAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostLogLevelOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLogLevelOKBody) UnmarshalBinary(b []byte) error {
	var res PostLogLevelOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostLogLevelOKBodyAllOf0 post log level o k body all of0
swagger:model PostLogLevelOKBodyAllOf0
*/
type PostLogLevelOKBodyAllOf0 string

// Validate validates this post log level o k body all of0
func (o PostLogLevelOKBodyAllOf0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post log level o k body all of0 based on context it is used
func (o PostLogLevelOKBodyAllOf0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

/*
PostLogLevelParamsBodyAllOf0 post log level params body all of0
swagger:model PostLogLevelParamsBodyAllOf0
*/
type PostLogLevelParamsBodyAllOf0 string

// Validate validates this post log level params body all of0
func (o PostLogLevelParamsBodyAllOf0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post log level params body all of0 based on context it is used
func (o PostLogLevelParamsBodyAllOf0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
