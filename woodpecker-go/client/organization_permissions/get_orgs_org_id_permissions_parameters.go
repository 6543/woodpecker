// Code generated by go-swagger; DO NOT EDIT.

package organization_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOrgsOrgIDPermissionsParams creates a new GetOrgsOrgIDPermissionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrgsOrgIDPermissionsParams() *GetOrgsOrgIDPermissionsParams {
	return &GetOrgsOrgIDPermissionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgsOrgIDPermissionsParamsWithTimeout creates a new GetOrgsOrgIDPermissionsParams object
// with the ability to set a timeout on a request.
func NewGetOrgsOrgIDPermissionsParamsWithTimeout(timeout time.Duration) *GetOrgsOrgIDPermissionsParams {
	return &GetOrgsOrgIDPermissionsParams{
		timeout: timeout,
	}
}

// NewGetOrgsOrgIDPermissionsParamsWithContext creates a new GetOrgsOrgIDPermissionsParams object
// with the ability to set a context for a request.
func NewGetOrgsOrgIDPermissionsParamsWithContext(ctx context.Context) *GetOrgsOrgIDPermissionsParams {
	return &GetOrgsOrgIDPermissionsParams{
		Context: ctx,
	}
}

// NewGetOrgsOrgIDPermissionsParamsWithHTTPClient creates a new GetOrgsOrgIDPermissionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrgsOrgIDPermissionsParamsWithHTTPClient(client *http.Client) *GetOrgsOrgIDPermissionsParams {
	return &GetOrgsOrgIDPermissionsParams{
		HTTPClient: client,
	}
}

/*
GetOrgsOrgIDPermissionsParams contains all the parameters to send to the API endpoint

	for the get orgs org ID permissions operation.

	Typically these are written to a http.Request.
*/
type GetOrgsOrgIDPermissionsParams struct {

	/* Authorization.

	   Insert your personal access token

	   Default: "Bearer \u003cpersonal access token\u003e"
	*/
	Authorization string

	/* OrgID.

	   the organziation's id
	*/
	OrgID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get orgs org ID permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgsOrgIDPermissionsParams) WithDefaults() *GetOrgsOrgIDPermissionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get orgs org ID permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgsOrgIDPermissionsParams) SetDefaults() {
	var (
		authorizationDefault = string("Bearer <personal access token>")
	)

	val := GetOrgsOrgIDPermissionsParams{
		Authorization: authorizationDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) WithTimeout(timeout time.Duration) *GetOrgsOrgIDPermissionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) WithContext(ctx context.Context) *GetOrgsOrgIDPermissionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) WithHTTPClient(client *http.Client) *GetOrgsOrgIDPermissionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) WithAuthorization(authorization string) *GetOrgsOrgIDPermissionsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithOrgID adds the orgID to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) WithOrgID(orgID string) *GetOrgsOrgIDPermissionsParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the get orgs org ID permissions params
func (o *GetOrgsOrgIDPermissionsParams) SetOrgID(orgID string) {
	o.OrgID = orgID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgsOrgIDPermissionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param org_id
	if err := r.SetPathParam("org_id", o.OrgID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
