// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new pipelines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new pipelines API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new pipelines API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for pipelines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteReposRepoIDPipelinesNumber(params *DeleteReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*DeleteReposRepoIDPipelinesNumberNoContent, error)

	GetReposRepoIDPipelines(params *GetReposRepoIDPipelinesParams, opts ...ClientOption) (*GetReposRepoIDPipelinesOK, error)

	GetReposRepoIDPipelinesNumber(params *GetReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*GetReposRepoIDPipelinesNumberOK, error)

	GetReposRepoIDPipelinesNumberConfig(params *GetReposRepoIDPipelinesNumberConfigParams, opts ...ClientOption) (*GetReposRepoIDPipelinesNumberConfigOK, error)

	PostReposRepoIDPipelines(params *PostReposRepoIDPipelinesParams, opts ...ClientOption) (*PostReposRepoIDPipelinesOK, error)

	PostReposRepoIDPipelinesNumber(params *PostReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberOK, error)

	PostReposRepoIDPipelinesNumberApprove(params *PostReposRepoIDPipelinesNumberApproveParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberApproveOK, error)

	PostReposRepoIDPipelinesNumberCancel(params *PostReposRepoIDPipelinesNumberCancelParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberCancelOK, error)

	PostReposRepoIDPipelinesNumberDecline(params *PostReposRepoIDPipelinesNumberDeclineParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberDeclineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteReposRepoIDPipelinesNumber deletes a pipeline
*/
func (a *Client) DeleteReposRepoIDPipelinesNumber(params *DeleteReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*DeleteReposRepoIDPipelinesNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReposRepoIDPipelinesNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReposRepoIDPipelinesNumber",
		Method:             "DELETE",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReposRepoIDPipelinesNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReposRepoIDPipelinesNumberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteReposRepoIDPipelinesNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDPipelines lists repository pipelines

Get a list of pipelines for a repository.
*/
func (a *Client) GetReposRepoIDPipelines(params *GetReposRepoIDPipelinesParams, opts ...ClientOption) (*GetReposRepoIDPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDPipelinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDPipelines",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDPipelinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDPipelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDPipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDPipelinesNumber gets a repositories pipeline
*/
func (a *Client) GetReposRepoIDPipelinesNumber(params *GetReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*GetReposRepoIDPipelinesNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDPipelinesNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDPipelinesNumber",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDPipelinesNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDPipelinesNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDPipelinesNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDPipelinesNumberConfig gets configuration files for a pipeline
*/
func (a *Client) GetReposRepoIDPipelinesNumberConfig(params *GetReposRepoIDPipelinesNumberConfigParams, opts ...ClientOption) (*GetReposRepoIDPipelinesNumberConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDPipelinesNumberConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDPipelinesNumberConfig",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDPipelinesNumberConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDPipelinesNumberConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDPipelinesNumberConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDPipelines triggers a manual pipeline
*/
func (a *Client) PostReposRepoIDPipelines(params *PostReposRepoIDPipelinesParams, opts ...ClientOption) (*PostReposRepoIDPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDPipelinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDPipelines",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDPipelinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDPipelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDPipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDPipelinesNumber restarts a pipeline

Restarts a pipeline optional with altered event, deploy or environment
*/
func (a *Client) PostReposRepoIDPipelinesNumber(params *PostReposRepoIDPipelinesNumberParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDPipelinesNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDPipelinesNumber",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDPipelinesNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDPipelinesNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDPipelinesNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDPipelinesNumberApprove approves and start a pipeline
*/
func (a *Client) PostReposRepoIDPipelinesNumberApprove(params *PostReposRepoIDPipelinesNumberApproveParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDPipelinesNumberApproveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDPipelinesNumberApprove",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDPipelinesNumberApproveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDPipelinesNumberApproveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDPipelinesNumberApprove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDPipelinesNumberCancel cancels a pipeline
*/
func (a *Client) PostReposRepoIDPipelinesNumberCancel(params *PostReposRepoIDPipelinesNumberCancelParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDPipelinesNumberCancelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDPipelinesNumberCancel",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}/cancel",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDPipelinesNumberCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDPipelinesNumberCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDPipelinesNumberCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDPipelinesNumberDecline declines a pipeline
*/
func (a *Client) PostReposRepoIDPipelinesNumberDecline(params *PostReposRepoIDPipelinesNumberDeclineParams, opts ...ClientOption) (*PostReposRepoIDPipelinesNumberDeclineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDPipelinesNumberDeclineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDPipelinesNumberDecline",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/pipelines/{number}/decline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDPipelinesNumberDeclineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDPipelinesNumberDeclineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDPipelinesNumberDecline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
