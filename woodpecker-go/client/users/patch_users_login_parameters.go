// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"go.woodpecker-ci.org/woodpecker/v2/woodpecker-go/models"
)

// NewPatchUsersLoginParams creates a new PatchUsersLoginParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchUsersLoginParams() *PatchUsersLoginParams {
	return &PatchUsersLoginParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchUsersLoginParamsWithTimeout creates a new PatchUsersLoginParams object
// with the ability to set a timeout on a request.
func NewPatchUsersLoginParamsWithTimeout(timeout time.Duration) *PatchUsersLoginParams {
	return &PatchUsersLoginParams{
		timeout: timeout,
	}
}

// NewPatchUsersLoginParamsWithContext creates a new PatchUsersLoginParams object
// with the ability to set a context for a request.
func NewPatchUsersLoginParamsWithContext(ctx context.Context) *PatchUsersLoginParams {
	return &PatchUsersLoginParams{
		Context: ctx,
	}
}

// NewPatchUsersLoginParamsWithHTTPClient creates a new PatchUsersLoginParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchUsersLoginParamsWithHTTPClient(client *http.Client) *PatchUsersLoginParams {
	return &PatchUsersLoginParams{
		HTTPClient: client,
	}
}

/*
PatchUsersLoginParams contains all the parameters to send to the API endpoint

	for the patch users login operation.

	Typically these are written to a http.Request.
*/
type PatchUsersLoginParams struct {

	/* Authorization.

	   Insert your personal access token

	   Default: "Bearer \u003cpersonal access token\u003e"
	*/
	Authorization string

	/* Login.

	   the user's login name
	*/
	Login string

	/* User.

	   the user's data
	*/
	User *models.User

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch users login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchUsersLoginParams) WithDefaults() *PatchUsersLoginParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch users login params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchUsersLoginParams) SetDefaults() {
	var (
		authorizationDefault = string("Bearer <personal access token>")
	)

	val := PatchUsersLoginParams{
		Authorization: authorizationDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch users login params
func (o *PatchUsersLoginParams) WithTimeout(timeout time.Duration) *PatchUsersLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch users login params
func (o *PatchUsersLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch users login params
func (o *PatchUsersLoginParams) WithContext(ctx context.Context) *PatchUsersLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch users login params
func (o *PatchUsersLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch users login params
func (o *PatchUsersLoginParams) WithHTTPClient(client *http.Client) *PatchUsersLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch users login params
func (o *PatchUsersLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the patch users login params
func (o *PatchUsersLoginParams) WithAuthorization(authorization string) *PatchUsersLoginParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the patch users login params
func (o *PatchUsersLoginParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithLogin adds the login to the patch users login params
func (o *PatchUsersLoginParams) WithLogin(login string) *PatchUsersLoginParams {
	o.SetLogin(login)
	return o
}

// SetLogin adds the login to the patch users login params
func (o *PatchUsersLoginParams) SetLogin(login string) {
	o.Login = login
}

// WithUser adds the user to the patch users login params
func (o *PatchUsersLoginParams) WithUser(user *models.User) *PatchUsersLoginParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the patch users login params
func (o *PatchUsersLoginParams) SetUser(user *models.User) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *PatchUsersLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param login
	if err := r.SetPathParam("login", o.Login); err != nil {
		return err
	}
	if o.User != nil {
		if err := r.SetBodyParam(o.User); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
