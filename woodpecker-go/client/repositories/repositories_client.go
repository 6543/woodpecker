// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new repositories API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new repositories API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteReposRepoID(params *DeleteReposRepoIDParams, opts ...ClientOption) (*DeleteReposRepoIDOK, error)

	GetRepos(params *GetReposParams, opts ...ClientOption) (*GetReposOK, error)

	GetReposLookupRepoFullName(params *GetReposLookupRepoFullNameParams, opts ...ClientOption) (*GetReposLookupRepoFullNameOK, error)

	GetReposRepoID(params *GetReposRepoIDParams, opts ...ClientOption) (*GetReposRepoIDOK, error)

	GetReposRepoIDBranches(params *GetReposRepoIDBranchesParams, opts ...ClientOption) (*GetReposRepoIDBranchesOK, error)

	GetReposRepoIDPermissions(params *GetReposRepoIDPermissionsParams, opts ...ClientOption) (*GetReposRepoIDPermissionsOK, error)

	GetReposRepoIDPullRequests(params *GetReposRepoIDPullRequestsParams, opts ...ClientOption) (*GetReposRepoIDPullRequestsOK, error)

	PatchReposRepoID(params *PatchReposRepoIDParams, opts ...ClientOption) (*PatchReposRepoIDOK, error)

	PostRepos(params *PostReposParams, opts ...ClientOption) (*PostReposOK, error)

	PostReposRepair(params *PostReposRepairParams, opts ...ClientOption) (*PostReposRepairNoContent, error)

	PostReposRepoIDChown(params *PostReposRepoIDChownParams, opts ...ClientOption) (*PostReposRepoIDChownOK, error)

	PostReposRepoIDMove(params *PostReposRepoIDMoveParams, opts ...ClientOption) (*PostReposRepoIDMoveNoContent, error)

	PostReposRepoIDRepair(params *PostReposRepoIDRepairParams, opts ...ClientOption) (*PostReposRepoIDRepairNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteReposRepoID deletes a repository
*/
func (a *Client) DeleteReposRepoID(params *DeleteReposRepoIDParams, opts ...ClientOption) (*DeleteReposRepoIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReposRepoIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReposRepoID",
		Method:             "DELETE",
		PathPattern:        "/repos/{repo_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReposRepoIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReposRepoIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteReposRepoID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRepos lists all repositories on the server

Returns a list of all repositories. Requires admin rights.
*/
func (a *Client) GetRepos(params *GetReposParams, opts ...ClientOption) (*GetReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepos",
		Method:             "GET",
		PathPattern:        "/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposLookupRepoFullName lookups a repository by full name
*/
func (a *Client) GetReposLookupRepoFullName(params *GetReposLookupRepoFullNameParams, opts ...ClientOption) (*GetReposLookupRepoFullNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposLookupRepoFullNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposLookupRepoFullName",
		Method:             "GET",
		PathPattern:        "/repos/lookup/{repo_full_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposLookupRepoFullNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposLookupRepoFullNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposLookupRepoFullName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoID gets a repository
*/
func (a *Client) GetReposRepoID(params *GetReposRepoIDParams, opts ...ClientOption) (*GetReposRepoIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoID",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDBranches gets branches of a repository
*/
func (a *Client) GetReposRepoIDBranches(params *GetReposRepoIDBranchesParams, opts ...ClientOption) (*GetReposRepoIDBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDBranches",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDBranchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDPermissions checks current authenticated users access to the repository

The repository permission, according to the used access token.
*/
func (a *Client) GetReposRepoIDPermissions(params *GetReposRepoIDPermissionsParams, opts ...ClientOption) (*GetReposRepoIDPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDPermissions",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReposRepoIDPullRequests lists active pull requests of a repository
*/
func (a *Client) GetReposRepoIDPullRequests(params *GetReposRepoIDPullRequestsParams, opts ...ClientOption) (*GetReposRepoIDPullRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReposRepoIDPullRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReposRepoIDPullRequests",
		Method:             "GET",
		PathPattern:        "/repos/{repo_id}/pull_requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReposRepoIDPullRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReposRepoIDPullRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReposRepoIDPullRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchReposRepoID updates a repository
*/
func (a *Client) PatchReposRepoID(params *PatchReposRepoIDParams, opts ...ClientOption) (*PatchReposRepoIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReposRepoIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchReposRepoID",
		Method:             "PATCH",
		PathPattern:        "/repos/{repo_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchReposRepoIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchReposRepoIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchReposRepoID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostRepos activates a repository
*/
func (a *Client) PostRepos(params *PostReposParams, opts ...ClientOption) (*PostReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRepos",
		Method:             "POST",
		PathPattern:        "/repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepair repairs all repositories on the server

Executes a repair process on all repositories. Requires admin rights.
*/
func (a *Client) PostReposRepair(params *PostReposRepairParams, opts ...ClientOption) (*PostReposRepairNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepairParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepair",
		Method:             "POST",
		PathPattern:        "/repos/repair",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepairNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDChown changes a repository s owner to the currently authenticated user
*/
func (a *Client) PostReposRepoIDChown(params *PostReposRepoIDChownParams, opts ...ClientOption) (*PostReposRepoIDChownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDChownParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDChown",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/chown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDChownReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDChownOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDChown: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDMove moves a repository to a new owner
*/
func (a *Client) PostReposRepoIDMove(params *PostReposRepoIDMoveParams, opts ...ClientOption) (*PostReposRepoIDMoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDMoveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDMove",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/move",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDMoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDMove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostReposRepoIDRepair repairs a repository
*/
func (a *Client) PostReposRepoIDRepair(params *PostReposRepoIDRepairParams, opts ...ClientOption) (*PostReposRepoIDRepairNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReposRepoIDRepairParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostReposRepoIDRepair",
		Method:             "POST",
		PathPattern:        "/repos/{repo_id}/repair",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReposRepoIDRepairReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostReposRepoIDRepairNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostReposRepoIDRepair: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
