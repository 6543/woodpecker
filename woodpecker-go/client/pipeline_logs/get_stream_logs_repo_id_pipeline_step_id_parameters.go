// Code generated by go-swagger; DO NOT EDIT.

package pipeline_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetStreamLogsRepoIDPipelineStepIDParams creates a new GetStreamLogsRepoIDPipelineStepIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetStreamLogsRepoIDPipelineStepIDParams() *GetStreamLogsRepoIDPipelineStepIDParams {
	return &GetStreamLogsRepoIDPipelineStepIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetStreamLogsRepoIDPipelineStepIDParamsWithTimeout creates a new GetStreamLogsRepoIDPipelineStepIDParams object
// with the ability to set a timeout on a request.
func NewGetStreamLogsRepoIDPipelineStepIDParamsWithTimeout(timeout time.Duration) *GetStreamLogsRepoIDPipelineStepIDParams {
	return &GetStreamLogsRepoIDPipelineStepIDParams{
		timeout: timeout,
	}
}

// NewGetStreamLogsRepoIDPipelineStepIDParamsWithContext creates a new GetStreamLogsRepoIDPipelineStepIDParams object
// with the ability to set a context for a request.
func NewGetStreamLogsRepoIDPipelineStepIDParamsWithContext(ctx context.Context) *GetStreamLogsRepoIDPipelineStepIDParams {
	return &GetStreamLogsRepoIDPipelineStepIDParams{
		Context: ctx,
	}
}

// NewGetStreamLogsRepoIDPipelineStepIDParamsWithHTTPClient creates a new GetStreamLogsRepoIDPipelineStepIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetStreamLogsRepoIDPipelineStepIDParamsWithHTTPClient(client *http.Client) *GetStreamLogsRepoIDPipelineStepIDParams {
	return &GetStreamLogsRepoIDPipelineStepIDParams{
		HTTPClient: client,
	}
}

/*
GetStreamLogsRepoIDPipelineStepIDParams contains all the parameters to send to the API endpoint

	for the get stream logs repo ID pipeline step ID operation.

	Typically these are written to a http.Request.
*/
type GetStreamLogsRepoIDPipelineStepIDParams struct {

	/* Pipeline.

	   the number of the pipeline
	*/
	Pipeline int64

	/* RepoID.

	   the repository id
	*/
	RepoID int64

	/* StepID.

	   the step id
	*/
	StepID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get stream logs repo ID pipeline step ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithDefaults() *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get stream logs repo ID pipeline step ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithTimeout(timeout time.Duration) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithContext(ctx context.Context) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithHTTPClient(client *http.Client) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPipeline adds the pipeline to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithPipeline(pipeline int64) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetPipeline(pipeline int64) {
	o.Pipeline = pipeline
}

// WithRepoID adds the repoID to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithRepoID(repoID int64) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetRepoID(repoID int64) {
	o.RepoID = repoID
}

// WithStepID adds the stepID to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WithStepID(stepID int64) *GetStreamLogsRepoIDPipelineStepIDParams {
	o.SetStepID(stepID)
	return o
}

// SetStepID adds the stepId to the get stream logs repo ID pipeline step ID params
func (o *GetStreamLogsRepoIDPipelineStepIDParams) SetStepID(stepID int64) {
	o.StepID = stepID
}

// WriteToRequest writes these params to a swagger request
func (o *GetStreamLogsRepoIDPipelineStepIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pipeline
	if err := r.SetPathParam("pipeline", swag.FormatInt64(o.Pipeline)); err != nil {
		return err
	}

	// path param repo_id
	if err := r.SetPathParam("repo_id", swag.FormatInt64(o.RepoID)); err != nil {
		return err
	}

	// path param stepID
	if err := r.SetPathParam("stepID", swag.FormatInt64(o.StepID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
