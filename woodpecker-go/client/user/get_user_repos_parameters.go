// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUserReposParams creates a new GetUserReposParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetUserReposParams() *GetUserReposParams {
	return &GetUserReposParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserReposParamsWithTimeout creates a new GetUserReposParams object
// with the ability to set a timeout on a request.
func NewGetUserReposParamsWithTimeout(timeout time.Duration) *GetUserReposParams {
	return &GetUserReposParams{
		timeout: timeout,
	}
}

// NewGetUserReposParamsWithContext creates a new GetUserReposParams object
// with the ability to set a context for a request.
func NewGetUserReposParamsWithContext(ctx context.Context) *GetUserReposParams {
	return &GetUserReposParams{
		Context: ctx,
	}
}

// NewGetUserReposParamsWithHTTPClient creates a new GetUserReposParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetUserReposParamsWithHTTPClient(client *http.Client) *GetUserReposParams {
	return &GetUserReposParams{
		HTTPClient: client,
	}
}

/*
GetUserReposParams contains all the parameters to send to the API endpoint

	for the get user repos operation.

	Typically these are written to a http.Request.
*/
type GetUserReposParams struct {

	/* Authorization.

	   Insert your personal access token

	   Default: "Bearer \u003cpersonal access token\u003e"
	*/
	Authorization string

	/* All.

	   query all repos, including inactive ones
	*/
	All *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get user repos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserReposParams) WithDefaults() *GetUserReposParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get user repos params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetUserReposParams) SetDefaults() {
	var (
		authorizationDefault = string("Bearer <personal access token>")
	)

	val := GetUserReposParams{
		Authorization: authorizationDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get user repos params
func (o *GetUserReposParams) WithTimeout(timeout time.Duration) *GetUserReposParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user repos params
func (o *GetUserReposParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user repos params
func (o *GetUserReposParams) WithContext(ctx context.Context) *GetUserReposParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user repos params
func (o *GetUserReposParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user repos params
func (o *GetUserReposParams) WithHTTPClient(client *http.Client) *GetUserReposParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user repos params
func (o *GetUserReposParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get user repos params
func (o *GetUserReposParams) WithAuthorization(authorization string) *GetUserReposParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get user repos params
func (o *GetUserReposParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAll adds the all to the get user repos params
func (o *GetUserReposParams) WithAll(all *bool) *GetUserReposParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the get user repos params
func (o *GetUserReposParams) SetAll(all *bool) {
	o.All = all
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserReposParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.All != nil {

		// query param all
		var qrAll bool

		if o.All != nil {
			qrAll = *o.All
		}
		qAll := swag.FormatBool(qrAll)
		if qAll != "" {

			if err := r.SetQueryParam("all", qAll); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
