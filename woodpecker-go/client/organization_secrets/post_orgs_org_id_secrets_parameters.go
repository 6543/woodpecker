// Code generated by go-swagger; DO NOT EDIT.

package organization_secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"go.woodpecker-ci.org/woodpecker/v2/woodpecker-go/models"
)

// NewPostOrgsOrgIDSecretsParams creates a new PostOrgsOrgIDSecretsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostOrgsOrgIDSecretsParams() *PostOrgsOrgIDSecretsParams {
	return &PostOrgsOrgIDSecretsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostOrgsOrgIDSecretsParamsWithTimeout creates a new PostOrgsOrgIDSecretsParams object
// with the ability to set a timeout on a request.
func NewPostOrgsOrgIDSecretsParamsWithTimeout(timeout time.Duration) *PostOrgsOrgIDSecretsParams {
	return &PostOrgsOrgIDSecretsParams{
		timeout: timeout,
	}
}

// NewPostOrgsOrgIDSecretsParamsWithContext creates a new PostOrgsOrgIDSecretsParams object
// with the ability to set a context for a request.
func NewPostOrgsOrgIDSecretsParamsWithContext(ctx context.Context) *PostOrgsOrgIDSecretsParams {
	return &PostOrgsOrgIDSecretsParams{
		Context: ctx,
	}
}

// NewPostOrgsOrgIDSecretsParamsWithHTTPClient creates a new PostOrgsOrgIDSecretsParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostOrgsOrgIDSecretsParamsWithHTTPClient(client *http.Client) *PostOrgsOrgIDSecretsParams {
	return &PostOrgsOrgIDSecretsParams{
		HTTPClient: client,
	}
}

/*
PostOrgsOrgIDSecretsParams contains all the parameters to send to the API endpoint

	for the post orgs org ID secrets operation.

	Typically these are written to a http.Request.
*/
type PostOrgsOrgIDSecretsParams struct {

	/* Authorization.

	   Insert your personal access token

	   Default: "Bearer \u003cpersonal access token\u003e"
	*/
	Authorization string

	/* OrgID.

	   the org's id
	*/
	OrgID string

	/* SecretData.

	   the new secret
	*/
	SecretData *models.Secret

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post orgs org ID secrets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostOrgsOrgIDSecretsParams) WithDefaults() *PostOrgsOrgIDSecretsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post orgs org ID secrets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostOrgsOrgIDSecretsParams) SetDefaults() {
	var (
		authorizationDefault = string("Bearer <personal access token>")
	)

	val := PostOrgsOrgIDSecretsParams{
		Authorization: authorizationDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithTimeout(timeout time.Duration) *PostOrgsOrgIDSecretsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithContext(ctx context.Context) *PostOrgsOrgIDSecretsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithHTTPClient(client *http.Client) *PostOrgsOrgIDSecretsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithAuthorization(authorization string) *PostOrgsOrgIDSecretsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithOrgID adds the orgID to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithOrgID(orgID string) *PostOrgsOrgIDSecretsParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetOrgID(orgID string) {
	o.OrgID = orgID
}

// WithSecretData adds the secretData to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) WithSecretData(secretData *models.Secret) *PostOrgsOrgIDSecretsParams {
	o.SetSecretData(secretData)
	return o
}

// SetSecretData adds the secretData to the post orgs org ID secrets params
func (o *PostOrgsOrgIDSecretsParams) SetSecretData(secretData *models.Secret) {
	o.SecretData = secretData
}

// WriteToRequest writes these params to a swagger request
func (o *PostOrgsOrgIDSecretsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param org_id
	if err := r.SetPathParam("org_id", o.OrgID); err != nil {
		return err
	}
	if o.SecretData != nil {
		if err := r.SetBodyParam(o.SecretData); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
