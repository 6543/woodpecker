// Code generated by go-swagger; DO NOT EDIT.

package pipeline_queues

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new pipeline queues API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new pipeline queues API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new pipeline queues API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for pipeline queues API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPipelines(params *GetPipelinesParams, opts ...ClientOption) (*GetPipelinesOK, error)

	GetQueueInfo(params *GetQueueInfoParams, opts ...ClientOption) (*GetQueueInfoOK, error)

	GetQueueNorunningpipelines(params *GetQueueNorunningpipelinesParams, opts ...ClientOption) (*GetQueueNorunningpipelinesNoContent, error)

	PostQueuePause(params *PostQueuePauseParams, opts ...ClientOption) (*PostQueuePauseNoContent, error)

	PostQueueResume(params *PostQueueResumeParams, opts ...ClientOption) (*PostQueueResumeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetPipelines lists pipelines in queue
*/
func (a *Client) GetPipelines(params *GetPipelinesParams, opts ...ClientOption) (*GetPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipelines",
		Method:             "GET",
		PathPattern:        "/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQueueInfo gets pipeline queue information

TODO: link the InfoT response object - this is blocked, until the `swaggo/swag` tool dependency is v1.18.12 or newer
*/
func (a *Client) GetQueueInfo(params *GetQueueInfoParams, opts ...ClientOption) (*GetQueueInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueueInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueueInfo",
		Method:             "GET",
		PathPattern:        "/queue/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetQueueInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueueInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQueueInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQueueNorunningpipelines blocks til pipeline queue has a running item
*/
func (a *Client) GetQueueNorunningpipelines(params *GetQueueNorunningpipelinesParams, opts ...ClientOption) (*GetQueueNorunningpipelinesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueueNorunningpipelinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueueNorunningpipelines",
		Method:             "GET",
		PathPattern:        "/queue/norunningpipelines",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetQueueNorunningpipelinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueueNorunningpipelinesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQueueNorunningpipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostQueuePause pauses the pipeline queue
*/
func (a *Client) PostQueuePause(params *PostQueuePauseParams, opts ...ClientOption) (*PostQueuePauseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueuePauseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueuePause",
		Method:             "POST",
		PathPattern:        "/queue/pause",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostQueuePauseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueuePauseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostQueuePause: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostQueueResume resumes the pipeline queue
*/
func (a *Client) PostQueueResume(params *PostQueueResumeParams, opts ...ClientOption) (*PostQueueResumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueueResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueueResume",
		Method:             "POST",
		PathPattern:        "/queue/resume",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostQueueResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueueResumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostQueueResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
