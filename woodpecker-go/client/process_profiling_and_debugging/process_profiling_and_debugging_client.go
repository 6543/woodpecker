// Code generated by go-swagger; DO NOT EDIT.

package process_profiling_and_debugging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new process profiling and debugging API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new process profiling and debugging API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new process profiling and debugging API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for process profiling and debugging API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextHTML sets the Accept header to "text/html".
func WithAcceptTextHTML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/html"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDebugPprof(params *GetDebugPprofParams, opts ...ClientOption) (*GetDebugPprofOK, error)

	GetDebugPprofBlock(params *GetDebugPprofBlockParams, opts ...ClientOption) (*GetDebugPprofBlockOK, error)

	GetDebugPprofCmdline(params *GetDebugPprofCmdlineParams, opts ...ClientOption) (*GetDebugPprofCmdlineOK, error)

	GetDebugPprofGoroutine(params *GetDebugPprofGoroutineParams, opts ...ClientOption) (*GetDebugPprofGoroutineOK, error)

	GetDebugPprofHeap(params *GetDebugPprofHeapParams, opts ...ClientOption) (*GetDebugPprofHeapOK, error)

	GetDebugPprofProfile(params *GetDebugPprofProfileParams, opts ...ClientOption) (*GetDebugPprofProfileOK, error)

	GetDebugPprofSymbol(params *GetDebugPprofSymbolParams, opts ...ClientOption) (*GetDebugPprofSymbolOK, error)

	GetDebugPprofThreadcreate(params *GetDebugPprofThreadcreateParams, opts ...ClientOption) (*GetDebugPprofThreadcreateOK, error)

	GetDebugPprofTrace(params *GetDebugPprofTraceParams, opts ...ClientOption) (*GetDebugPprofTraceOK, error)

	PostDebugPprofSymbol(params *PostDebugPprofSymbolParams, opts ...ClientOption) (*PostDebugPprofSymbolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDebugPprof lists available pprof profiles HTML

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprof(params *GetDebugPprofParams, opts ...ClientOption) (*GetDebugPprofOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprof",
		Method:             "GET",
		PathPattern:        "/debug/pprof",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprof: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugPprofBlock gets pprof stack traces that led to blocking on synchronization primitives

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprofBlock(params *GetDebugPprofBlockParams, opts ...ClientOption) (*GetDebugPprofBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofBlock",
		Method:             "GET",
		PathPattern:        "/debug/pprof/block",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofBlockOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugPprofCmdline gets the command line invocation of the current program

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprofCmdline(params *GetDebugPprofCmdlineParams, opts ...ClientOption) (*GetDebugPprofCmdlineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofCmdlineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofCmdline",
		Method:             "GET",
		PathPattern:        "/debug/pprof/cmdline",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofCmdlineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofCmdlineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofCmdline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugPprofGoroutine gets pprof stack traces of all current goroutines

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprofGoroutine(params *GetDebugPprofGoroutineParams, opts ...ClientOption) (*GetDebugPprofGoroutineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofGoroutineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofGoroutine",
		Method:             "GET",
		PathPattern:        "/debug/pprof/goroutine",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofGoroutineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofGoroutineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofGoroutine: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugPprofHeap gets pprof heap dump a sampling of memory allocations of live objects

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprofHeap(params *GetDebugPprofHeapParams, opts ...ClientOption) (*GetDebugPprofHeapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofHeapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofHeap",
		Method:             "GET",
		PathPattern:        "/debug/pprof/heap",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofHeapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofHeapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofHeap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDebugPprofProfile gets pprof CPU profile

	Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

After you get the profile file, use the go tool pprof command to investigate the profile.
*/
func (a *Client) GetDebugPprofProfile(params *GetDebugPprofProfileParams, opts ...ClientOption) (*GetDebugPprofProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofProfile",
		Method:             "GET",
		PathPattern:        "/debug/pprof/profile",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDebugPprofSymbol gets pprof program counters mapping to function names

	Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

Looks up the program counters listed in the request,
responding with a table mapping program counters to function names.
The requested program counters can be provided via GET + query parameters,
or POST + body parameters. Program counters shall be space delimited.
*/
func (a *Client) GetDebugPprofSymbol(params *GetDebugPprofSymbolParams, opts ...ClientOption) (*GetDebugPprofSymbolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofSymbolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofSymbol",
		Method:             "GET",
		PathPattern:        "/debug/pprof/symbol",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofSymbolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofSymbolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofSymbol: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebugPprofThreadcreate gets pprof stack traces that led to the creation of new o s threads

Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
*/
func (a *Client) GetDebugPprofThreadcreate(params *GetDebugPprofThreadcreateParams, opts ...ClientOption) (*GetDebugPprofThreadcreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofThreadcreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofThreadcreate",
		Method:             "GET",
		PathPattern:        "/debug/pprof/threadcreate",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofThreadcreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofThreadcreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofThreadcreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDebugPprofTrace gets a trace of execution of the current program

	Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

After you get the profile file, use the go tool pprof command to investigate the profile.
*/
func (a *Client) GetDebugPprofTrace(params *GetDebugPprofTraceParams, opts ...ClientOption) (*GetDebugPprofTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofTraceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDebugPprofTrace",
		Method:             "GET",
		PathPattern:        "/debug/pprof/trace",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofTraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebugPprofTraceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDebugPprofTrace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostDebugPprofSymbol gets pprof program counters mapping to function names

	Only available, when server was started with WOODPECKER_LOG_LEVEL=debug

Looks up the program counters listed in the request,
responding with a table mapping program counters to function names.
The requested program counters can be provided via GET + query parameters,
or POST + body parameters. Program counters shall be space delimited.
*/
func (a *Client) PostDebugPprofSymbol(params *PostDebugPprofSymbolParams, opts ...ClientOption) (*PostDebugPprofSymbolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDebugPprofSymbolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDebugPprofSymbol",
		Method:             "POST",
		PathPattern:        "/debug/pprof/symbol",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDebugPprofSymbolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDebugPprofSymbolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDebugPprofSymbol: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
