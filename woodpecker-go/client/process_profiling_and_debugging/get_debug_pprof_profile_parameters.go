// Code generated by go-swagger; DO NOT EDIT.

package process_profiling_and_debugging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDebugPprofProfileParams creates a new GetDebugPprofProfileParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDebugPprofProfileParams() *GetDebugPprofProfileParams {
	return &GetDebugPprofProfileParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDebugPprofProfileParamsWithTimeout creates a new GetDebugPprofProfileParams object
// with the ability to set a timeout on a request.
func NewGetDebugPprofProfileParamsWithTimeout(timeout time.Duration) *GetDebugPprofProfileParams {
	return &GetDebugPprofProfileParams{
		timeout: timeout,
	}
}

// NewGetDebugPprofProfileParamsWithContext creates a new GetDebugPprofProfileParams object
// with the ability to set a context for a request.
func NewGetDebugPprofProfileParamsWithContext(ctx context.Context) *GetDebugPprofProfileParams {
	return &GetDebugPprofProfileParams{
		Context: ctx,
	}
}

// NewGetDebugPprofProfileParamsWithHTTPClient creates a new GetDebugPprofProfileParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDebugPprofProfileParamsWithHTTPClient(client *http.Client) *GetDebugPprofProfileParams {
	return &GetDebugPprofProfileParams{
		HTTPClient: client,
	}
}

/*
GetDebugPprofProfileParams contains all the parameters to send to the API endpoint

	for the get debug pprof profile operation.

	Typically these are written to a http.Request.
*/
type GetDebugPprofProfileParams struct {

	/* Authorization.

	   Insert your personal access token

	   Default: "Bearer \u003cpersonal access token\u003e"
	*/
	Authorization string

	/* Seconds.

	   You can specify the duration in the seconds GET parameter.
	*/
	Seconds int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get debug pprof profile params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDebugPprofProfileParams) WithDefaults() *GetDebugPprofProfileParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get debug pprof profile params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDebugPprofProfileParams) SetDefaults() {
	var (
		authorizationDefault = string("Bearer <personal access token>")
	)

	val := GetDebugPprofProfileParams{
		Authorization: authorizationDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) WithTimeout(timeout time.Duration) *GetDebugPprofProfileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) WithContext(ctx context.Context) *GetDebugPprofProfileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) WithHTTPClient(client *http.Client) *GetDebugPprofProfileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) WithAuthorization(authorization string) *GetDebugPprofProfileParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithSeconds adds the seconds to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) WithSeconds(seconds int64) *GetDebugPprofProfileParams {
	o.SetSeconds(seconds)
	return o
}

// SetSeconds adds the seconds to the get debug pprof profile params
func (o *GetDebugPprofProfileParams) SetSeconds(seconds int64) {
	o.Seconds = seconds
}

// WriteToRequest writes these params to a swagger request
func (o *GetDebugPprofProfileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param seconds
	qrSeconds := o.Seconds
	qSeconds := swag.FormatInt64(qrSeconds)
	if qSeconds != "" {

		if err := r.SetQueryParam("seconds", qSeconds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
