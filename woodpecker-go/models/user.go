// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// User user
//
// swagger:model User
type User struct {

	// Admin indicates the user is a system administrator.
	//
	// NOTE: If the username is part of the WOODPECKER_ADMIN
	// environment variable, this value will be set to true on login.
	Admin bool `json:"admin,omitempty"`

	// the avatar url for this user.
	AvatarURL string `json:"avatar_url,omitempty"`

	// Email is the email address for this user.
	//
	// required: true
	Email string `json:"email,omitempty"`

	// forge id
	ForgeID int64 `json:"forge_id,omitempty"`

	// the id for this user.
	//
	// required: true
	ID int64 `json:"id,omitempty"`

	// Login is the username for this user.
	//
	// required: true
	Login string `json:"login,omitempty"`

	// OrgID is the of the user as model.Org.
	OrgID int64 `json:"org_id,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
