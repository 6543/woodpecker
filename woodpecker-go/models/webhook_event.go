// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WebhookEvent webhook event
//
// swagger:model WebhookEvent
type WebhookEvent string

func NewWebhookEvent(value WebhookEvent) *WebhookEvent {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WebhookEvent.
func (m WebhookEvent) Pointer() *WebhookEvent {
	return &m
}

const (

	// WebhookEventPush captures enum value "push"
	WebhookEventPush WebhookEvent = "push"

	// WebhookEventPullRequest captures enum value "pull_request"
	WebhookEventPullRequest WebhookEvent = "pull_request"

	// WebhookEventPullRequestClosed captures enum value "pull_request_closed"
	WebhookEventPullRequestClosed WebhookEvent = "pull_request_closed"

	// WebhookEventTag captures enum value "tag"
	WebhookEventTag WebhookEvent = "tag"

	// WebhookEventRelease captures enum value "release"
	WebhookEventRelease WebhookEvent = "release"

	// WebhookEventDeployment captures enum value "deployment"
	WebhookEventDeployment WebhookEvent = "deployment"

	// WebhookEventCron captures enum value "cron"
	WebhookEventCron WebhookEvent = "cron"

	// WebhookEventManual captures enum value "manual"
	WebhookEventManual WebhookEvent = "manual"
)

// for schema
var webhookEventEnum []interface{}

func init() {
	var res []WebhookEvent
	if err := json.Unmarshal([]byte(`["push","pull_request","pull_request_closed","tag","release","deployment","cron","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webhookEventEnum = append(webhookEventEnum, v)
	}
}

func (m WebhookEvent) validateWebhookEventEnum(path, location string, value WebhookEvent) error {
	if err := validate.EnumCase(path, location, value, webhookEventEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this webhook event
func (m WebhookEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWebhookEventEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this webhook event based on context it is used
func (m WebhookEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
