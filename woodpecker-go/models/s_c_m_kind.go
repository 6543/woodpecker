// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SCMKind s c m kind
//
// swagger:model SCMKind
type SCMKind string

func NewSCMKind(value SCMKind) *SCMKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SCMKind.
func (m SCMKind) Pointer() *SCMKind {
	return &m
}

const (

	// SCMKindGit captures enum value "git"
	SCMKindGit SCMKind = "git"

	// SCMKindHg captures enum value "hg"
	SCMKindHg SCMKind = "hg"

	// SCMKindFossil captures enum value "fossil"
	SCMKindFossil SCMKind = "fossil"

	// SCMKindPerforce captures enum value "perforce"
	SCMKindPerforce SCMKind = "perforce"
)

// for schema
var sCMKindEnum []interface{}

func init() {
	var res []SCMKind
	if err := json.Unmarshal([]byte(`["git","hg","fossil","perforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sCMKindEnum = append(sCMKindEnum, v)
	}
}

func (m SCMKind) validateSCMKindEnum(path, location string, value SCMKind) error {
	if err := validate.EnumCase(path, location, value, sCMKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this s c m kind
func (m SCMKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSCMKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this s c m kind based on context it is used
func (m SCMKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
