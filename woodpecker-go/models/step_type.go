// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StepType step type
//
// swagger:model StepType
type StepType string

func NewStepType(value StepType) *StepType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StepType.
func (m StepType) Pointer() *StepType {
	return &m
}

const (

	// StepTypeClone captures enum value "clone"
	StepTypeClone StepType = "clone"

	// StepTypeService captures enum value "service"
	StepTypeService StepType = "service"

	// StepTypePlugin captures enum value "plugin"
	StepTypePlugin StepType = "plugin"

	// StepTypeCommands captures enum value "commands"
	StepTypeCommands StepType = "commands"

	// StepTypeCache captures enum value "cache"
	StepTypeCache StepType = "cache"
)

// for schema
var stepTypeEnum []interface{}

func init() {
	var res []StepType
	if err := json.Unmarshal([]byte(`["clone","service","plugin","commands","cache"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepTypeEnum = append(stepTypeEnum, v)
	}
}

func (m StepType) validateStepTypeEnum(path, location string, value StepType) error {
	if err := validate.EnumCase(path, location, value, stepTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this step type
func (m StepType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStepTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this step type based on context it is used
func (m StepType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
