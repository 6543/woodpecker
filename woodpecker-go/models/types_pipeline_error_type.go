// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesPipelineErrorType types pipeline error type
//
// swagger:model types.PipelineErrorType
type TypesPipelineErrorType string

func NewTypesPipelineErrorType(value TypesPipelineErrorType) *TypesPipelineErrorType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesPipelineErrorType.
func (m TypesPipelineErrorType) Pointer() *TypesPipelineErrorType {
	return &m
}

const (

	// TypesPipelineErrorTypeLinter captures enum value "linter"
	TypesPipelineErrorTypeLinter TypesPipelineErrorType = "linter"

	// TypesPipelineErrorTypeDeprecation captures enum value "deprecation"
	TypesPipelineErrorTypeDeprecation TypesPipelineErrorType = "deprecation"

	// TypesPipelineErrorTypeCompiler captures enum value "compiler"
	TypesPipelineErrorTypeCompiler TypesPipelineErrorType = "compiler"

	// TypesPipelineErrorTypeGeneric captures enum value "generic"
	TypesPipelineErrorTypeGeneric TypesPipelineErrorType = "generic"

	// TypesPipelineErrorTypeBadHabit captures enum value "bad_habit"
	TypesPipelineErrorTypeBadHabit TypesPipelineErrorType = "bad_habit"
)

// for schema
var typesPipelineErrorTypeEnum []interface{}

func init() {
	var res []TypesPipelineErrorType
	if err := json.Unmarshal([]byte(`["linter","deprecation","compiler","generic","bad_habit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesPipelineErrorTypeEnum = append(typesPipelineErrorTypeEnum, v)
	}
}

func (m TypesPipelineErrorType) validateTypesPipelineErrorTypeEnum(path, location string, value TypesPipelineErrorType) error {
	if err := validate.EnumCase(path, location, value, typesPipelineErrorTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types pipeline error type
func (m TypesPipelineErrorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesPipelineErrorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types pipeline error type based on context it is used
func (m TypesPipelineErrorType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
