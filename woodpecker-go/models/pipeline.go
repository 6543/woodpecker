// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Pipeline pipeline
//
// swagger:model Pipeline
type Pipeline struct {

	// author
	Author string `json:"author,omitempty"`

	// author avatar
	AuthorAvatar string `json:"author_avatar,omitempty"`

	// author email
	AuthorEmail string `json:"author_email,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// changed files
	ChangedFiles []string `json:"changed_files"`

	// commit
	Commit string `json:"commit,omitempty"`

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// deploy task
	DeployTask string `json:"deploy_task,omitempty"`

	// deploy to
	DeployTo string `json:"deploy_to,omitempty"`

	// errors
	Errors []*TypesPipelineError `json:"errors"`

	// event
	Event WebhookEvent `json:"event,omitempty"`

	// finished at
	FinishedAt int64 `json:"finished_at,omitempty"`

	// forge url
	ForgeURL string `json:"forge_url,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is prerelease
	IsPrerelease bool `json:"is_prerelease,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// number
	Number int64 `json:"number,omitempty"`

	// parent
	Parent int64 `json:"parent,omitempty"`

	// pr labels
	PrLabels []string `json:"pr_labels"`

	// ref
	Ref string `json:"ref,omitempty"`

	// refspec
	Refspec string `json:"refspec,omitempty"`

	// reviewed at
	ReviewedAt int64 `json:"reviewed_at,omitempty"`

	// reviewed by
	ReviewedBy string `json:"reviewed_by,omitempty"`

	// uses reported user for webhooks and name of cron for cron pipelines
	Sender string `json:"sender,omitempty"`

	// started at
	StartedAt int64 `json:"started_at,omitempty"`

	// status
	Status StatusValue `json:"status,omitempty"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// variables
	Variables map[string]string `json:"variables,omitempty"`

	// workflows
	Workflows []*ModelWorkflow `json:"workflows"`
}

// Validate validates this pipeline
func (m *Pipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pipeline) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pipeline) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if err := m.Event.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event")
		}
		return err
	}

	return nil
}

func (m *Pipeline) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Pipeline) validateWorkflows(formats strfmt.Registry) error {
	if swag.IsZero(m.Workflows) { // not required
		return nil
	}

	for i := 0; i < len(m.Workflows); i++ {
		if swag.IsZero(m.Workflows[i]) { // not required
			continue
		}

		if m.Workflows[i] != nil {
			if err := m.Workflows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pipeline based on the context it is used
func (m *Pipeline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pipeline) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {

			if swag.IsZero(m.Errors[i]) { // not required
				return nil
			}

			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pipeline) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if err := m.Event.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event")
		}
		return err
	}

	return nil
}

func (m *Pipeline) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *Pipeline) contextValidateWorkflows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Workflows); i++ {

		if m.Workflows[i] != nil {

			if swag.IsZero(m.Workflows[i]) { // not required
				return nil
			}

			if err := m.Workflows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pipeline) UnmarshalBinary(b []byte) error {
	var res Pipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
