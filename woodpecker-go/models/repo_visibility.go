// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepoVisibility repo visibility
//
// swagger:model RepoVisibility
type RepoVisibility string

func NewRepoVisibility(value RepoVisibility) *RepoVisibility {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RepoVisibility.
func (m RepoVisibility) Pointer() *RepoVisibility {
	return &m
}

const (

	// RepoVisibilityPublic captures enum value "public"
	RepoVisibilityPublic RepoVisibility = "public"

	// RepoVisibilityPrivate captures enum value "private"
	RepoVisibilityPrivate RepoVisibility = "private"

	// RepoVisibilityInternal captures enum value "internal"
	RepoVisibilityInternal RepoVisibility = "internal"
)

// for schema
var repoVisibilityEnum []interface{}

func init() {
	var res []RepoVisibility
	if err := json.Unmarshal([]byte(`["public","private","internal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repoVisibilityEnum = append(repoVisibilityEnum, v)
	}
}

func (m RepoVisibility) validateRepoVisibilityEnum(path, location string, value RepoVisibility) error {
	if err := validate.EnumCase(path, location, value, repoVisibilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repo visibility
func (m RepoVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepoVisibilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repo visibility based on context it is used
func (m RepoVisibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
