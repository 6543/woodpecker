// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type { GetAgentsData, GetAgentsError, GetAgentsResponse, PostAgentsData, PostAgentsError, PostAgentsResponse, DeleteAgentsByAgentData, DeleteAgentsByAgentError, DeleteAgentsByAgentResponse, GetAgentsByAgentData, GetAgentsByAgentError, GetAgentsByAgentResponse, PatchAgentsByAgentData, PatchAgentsByAgentError, PatchAgentsByAgentResponse, GetAgentsByAgentTasksData, GetAgentsByAgentTasksError, GetAgentsByAgentTasksResponse, GetBadgesByRepoIdCcXmlData, GetBadgesByRepoIdCcXmlError, GetBadgesByRepoIdCcXmlResponse, GetBadgesByRepoIdStatusSvgData, GetBadgesByRepoIdStatusSvgError, GetBadgesByRepoIdStatusSvgResponse, GetDebugPprofData, GetDebugPprofError, GetDebugPprofResponse, GetDebugPprofBlockData, GetDebugPprofBlockError, GetDebugPprofBlockResponse, GetDebugPprofCmdlineData, GetDebugPprofCmdlineError, GetDebugPprofCmdlineResponse, GetDebugPprofGoroutineData, GetDebugPprofGoroutineError, GetDebugPprofGoroutineResponse, GetDebugPprofHeapData, GetDebugPprofHeapError, GetDebugPprofHeapResponse, GetDebugPprofProfileData, GetDebugPprofProfileError, GetDebugPprofProfileResponse, GetDebugPprofSymbolData, GetDebugPprofSymbolError, GetDebugPprofSymbolResponse, PostDebugPprofSymbolData, PostDebugPprofSymbolError, PostDebugPprofSymbolResponse, GetDebugPprofThreadcreateData, GetDebugPprofThreadcreateError, GetDebugPprofThreadcreateResponse, GetDebugPprofTraceData, GetDebugPprofTraceError, GetDebugPprofTraceResponse, GetForgesData, GetForgesError, GetForgesResponse, PostForgesData, PostForgesError, PostForgesResponse, DeleteForgesByForgeIdData, DeleteForgesByForgeIdError, DeleteForgesByForgeIdResponse, GetForgesByForgeIdData, GetForgesByForgeIdError, GetForgesByForgeIdResponse, PatchForgesByForgeIdData, PatchForgesByForgeIdError, PatchForgesByForgeIdResponse, GetHealthzError, GetHealthzResponse, PostHookData, PostHookError, PostHookResponse, GetLogLevelError, GetLogLevelResponse, PostLogLevelData, PostLogLevelError, PostLogLevelResponse, GetOrgLookupByOrgFullNameData, GetOrgLookupByOrgFullNameError, GetOrgLookupByOrgFullNameResponse, GetOrgsData, GetOrgsError, GetOrgsResponse, DeleteOrgsByIdData, DeleteOrgsByIdError, DeleteOrgsByIdResponse, GetOrgsByOrgIdData, GetOrgsByOrgIdError, GetOrgsByOrgIdResponse, GetOrgsByOrgIdPermissionsData, GetOrgsByOrgIdPermissionsError, GetOrgsByOrgIdPermissionsResponse, GetOrgsByOrgIdSecretsData, GetOrgsByOrgIdSecretsError, GetOrgsByOrgIdSecretsResponse, PostOrgsByOrgIdSecretsData, PostOrgsByOrgIdSecretsError, PostOrgsByOrgIdSecretsResponse, DeleteOrgsByOrgIdSecretsBySecretData, DeleteOrgsByOrgIdSecretsBySecretError, DeleteOrgsByOrgIdSecretsBySecretResponse, GetOrgsByOrgIdSecretsBySecretData, GetOrgsByOrgIdSecretsBySecretError, GetOrgsByOrgIdSecretsBySecretResponse, PatchOrgsByOrgIdSecretsBySecretData, PatchOrgsByOrgIdSecretsBySecretError, PatchOrgsByOrgIdSecretsBySecretResponse, GetPipelinesData, GetPipelinesError, GetPipelinesResponse, GetQueueInfoData, GetQueueInfoError, GetQueueInfoResponse, GetQueueNorunningpipelinesData, GetQueueNorunningpipelinesError, GetQueueNorunningpipelinesResponse, PostQueuePauseData, PostQueuePauseError, PostQueuePauseResponse, PostQueueResumeData, PostQueueResumeError, PostQueueResumeResponse, GetReposData, GetReposError, GetReposResponse, PostReposData, PostReposError, PostReposResponse, GetReposLookupByRepoFullNameData, GetReposLookupByRepoFullNameError, GetReposLookupByRepoFullNameResponse, PostReposRepairData, PostReposRepairError, PostReposRepairResponse, DeleteReposByRepoIdData, DeleteReposByRepoIdError, DeleteReposByRepoIdResponse, GetReposByRepoIdData, GetReposByRepoIdError, GetReposByRepoIdResponse, PatchReposByRepoIdData, PatchReposByRepoIdError, PatchReposByRepoIdResponse, GetReposByRepoIdBranchesData, GetReposByRepoIdBranchesError, GetReposByRepoIdBranchesResponse, PostReposByRepoIdChownData, PostReposByRepoIdChownError, PostReposByRepoIdChownResponse, GetReposByRepoIdCronData, GetReposByRepoIdCronError, GetReposByRepoIdCronResponse, PostReposByRepoIdCronData, PostReposByRepoIdCronError, PostReposByRepoIdCronResponse, DeleteReposByRepoIdCronByCronData, DeleteReposByRepoIdCronByCronError, DeleteReposByRepoIdCronByCronResponse, GetReposByRepoIdCronByCronData, GetReposByRepoIdCronByCronError, GetReposByRepoIdCronByCronResponse, PatchReposByRepoIdCronByCronData, PatchReposByRepoIdCronByCronError, PatchReposByRepoIdCronByCronResponse, PostReposByRepoIdCronByCronData, PostReposByRepoIdCronByCronError, PostReposByRepoIdCronByCronResponse, DeleteReposByRepoIdLogsByNumberData, DeleteReposByRepoIdLogsByNumberError, DeleteReposByRepoIdLogsByNumberResponse, GetReposByRepoIdLogsByNumberByStepIdData, GetReposByRepoIdLogsByNumberByStepIdError, GetReposByRepoIdLogsByNumberByStepIdResponse, DeleteReposByRepoIdLogsByNumberByStepIdData, DeleteReposByRepoIdLogsByNumberByStepIdError, DeleteReposByRepoIdLogsByNumberByStepIdResponse, PostReposByRepoIdMoveData, PostReposByRepoIdMoveError, PostReposByRepoIdMoveResponse, GetReposByRepoIdPermissionsData, GetReposByRepoIdPermissionsError, GetReposByRepoIdPermissionsResponse, GetReposByRepoIdPipelinesData, GetReposByRepoIdPipelinesError, GetReposByRepoIdPipelinesResponse, PostReposByRepoIdPipelinesData, PostReposByRepoIdPipelinesError, PostReposByRepoIdPipelinesResponse, DeleteReposByRepoIdPipelinesByNumberData, DeleteReposByRepoIdPipelinesByNumberError, DeleteReposByRepoIdPipelinesByNumberResponse, GetReposByRepoIdPipelinesByNumberData, GetReposByRepoIdPipelinesByNumberError, GetReposByRepoIdPipelinesByNumberResponse, PostReposByRepoIdPipelinesByNumberData, PostReposByRepoIdPipelinesByNumberError, PostReposByRepoIdPipelinesByNumberResponse, PostReposByRepoIdPipelinesByNumberApproveData, PostReposByRepoIdPipelinesByNumberApproveError, PostReposByRepoIdPipelinesByNumberApproveResponse, PostReposByRepoIdPipelinesByNumberCancelData, PostReposByRepoIdPipelinesByNumberCancelError, PostReposByRepoIdPipelinesByNumberCancelResponse, GetReposByRepoIdPipelinesByNumberConfigData, GetReposByRepoIdPipelinesByNumberConfigError, GetReposByRepoIdPipelinesByNumberConfigResponse, PostReposByRepoIdPipelinesByNumberDeclineData, PostReposByRepoIdPipelinesByNumberDeclineError, PostReposByRepoIdPipelinesByNumberDeclineResponse, GetReposByRepoIdPullRequestsData, GetReposByRepoIdPullRequestsError, GetReposByRepoIdPullRequestsResponse, GetReposByRepoIdRegistryData, GetReposByRepoIdRegistryError, GetReposByRepoIdRegistryResponse, PostReposByRepoIdRegistryData, PostReposByRepoIdRegistryError, PostReposByRepoIdRegistryResponse, DeleteReposByRepoIdRegistryByRegistryData, DeleteReposByRepoIdRegistryByRegistryError, DeleteReposByRepoIdRegistryByRegistryResponse, GetReposByRepoIdRegistryByRegistryData, GetReposByRepoIdRegistryByRegistryError, GetReposByRepoIdRegistryByRegistryResponse, PatchReposByRepoIdRegistryByRegistryData, PatchReposByRepoIdRegistryByRegistryError, PatchReposByRepoIdRegistryByRegistryResponse, PostReposByRepoIdRepairData, PostReposByRepoIdRepairError, PostReposByRepoIdRepairResponse, GetReposByRepoIdSecretsData, GetReposByRepoIdSecretsError, GetReposByRepoIdSecretsResponse, PostReposByRepoIdSecretsData, PostReposByRepoIdSecretsError, PostReposByRepoIdSecretsResponse, DeleteReposByRepoIdSecretsBySecretNameData, DeleteReposByRepoIdSecretsBySecretNameError, DeleteReposByRepoIdSecretsBySecretNameResponse, GetReposByRepoIdSecretsBySecretNameData, GetReposByRepoIdSecretsBySecretNameError, GetReposByRepoIdSecretsBySecretNameResponse, PatchReposByRepoIdSecretsBySecretNameData, PatchReposByRepoIdSecretsBySecretNameError, PatchReposByRepoIdSecretsBySecretNameResponse, GetSecretsData, GetSecretsError, GetSecretsResponse, PostSecretsData, PostSecretsError, PostSecretsResponse, DeleteSecretsBySecretData, DeleteSecretsBySecretError, DeleteSecretsBySecretResponse, GetSecretsBySecretData, GetSecretsBySecretError, GetSecretsBySecretResponse, PatchSecretsBySecretData, PatchSecretsBySecretError, PatchSecretsBySecretResponse, GetSignaturePublicKeyData, GetSignaturePublicKeyError, GetSignaturePublicKeyResponse, GetStreamEventsError, GetStreamEventsResponse, GetStreamLogsByRepoIdByPipelineByStepIdData, GetStreamLogsByRepoIdByPipelineByStepIdError, GetStreamLogsByRepoIdByPipelineByStepIdResponse, GetUserData, GetUserError, GetUserResponse, GetUserFeedData, GetUserFeedError, GetUserFeedResponse, GetUserReposData, GetUserReposError, GetUserReposResponse, DeleteUserTokenData, DeleteUserTokenError, DeleteUserTokenResponse, PostUserTokenData, PostUserTokenError, PostUserTokenResponse, GetUsersData, GetUsersError, GetUsersResponse, PostUsersData, PostUsersError, PostUsersResponse, DeleteUsersByLoginData, DeleteUsersByLoginError, DeleteUsersByLoginResponse, GetUsersByLoginData, GetUsersByLoginError, GetUsersByLoginResponse, PatchUsersByLoginData, PatchUsersByLoginError, PatchUsersByLoginResponse, GetVersionError, GetVersionResponse } from './types.gen';

/**
 * List agents
 */
export const getAgents = (options: Options<GetAgentsData>) => { return (options?.client ?? client).get<GetAgentsResponse, GetAgentsError>({
    ...options,
    url: '/agents'
}); };

/**
 * Create a new agent
 * Creates a new agent with a random token
 */
export const postAgents = (options: Options<PostAgentsData>) => { return (options?.client ?? client).post<PostAgentsResponse, PostAgentsError>({
    ...options,
    url: '/agents'
}); };

/**
 * Delete an agent
 */
export const deleteAgentsByAgent = (options: Options<DeleteAgentsByAgentData>) => { return (options?.client ?? client).delete<DeleteAgentsByAgentResponse, DeleteAgentsByAgentError>({
    ...options,
    url: '/agents/{agent}'
}); };

/**
 * Get an agent
 */
export const getAgentsByAgent = (options: Options<GetAgentsByAgentData>) => { return (options?.client ?? client).get<GetAgentsByAgentResponse, GetAgentsByAgentError>({
    ...options,
    url: '/agents/{agent}'
}); };

/**
 * Update an agent
 */
export const patchAgentsByAgent = (options: Options<PatchAgentsByAgentData>) => { return (options?.client ?? client).patch<PatchAgentsByAgentResponse, PatchAgentsByAgentError>({
    ...options,
    url: '/agents/{agent}'
}); };

/**
 * List agent tasks
 */
export const getAgentsByAgentTasks = (options: Options<GetAgentsByAgentTasksData>) => { return (options?.client ?? client).get<GetAgentsByAgentTasksResponse, GetAgentsByAgentTasksError>({
    ...options,
    url: '/agents/{agent}/tasks'
}); };

/**
 * Provide pipeline status information to the CCMenu tool
 * CCMenu displays the pipeline status of projects on a CI server as an item in the Mac's menu bar.
 * More details on how to install, you can find at http://ccmenu.org/
 * The response format adheres to CCTray v1 Specification, https://cctray.org/v1/
 */
export const getBadgesByRepoIdCcXml = (options: Options<GetBadgesByRepoIdCcXmlData>) => { return (options?.client ?? client).get<GetBadgesByRepoIdCcXmlResponse, GetBadgesByRepoIdCcXmlError>({
    ...options,
    url: '/badges/{repo_id}/cc.xml'
}); };

/**
 * Get status of pipeline as SVG badge
 */
export const getBadgesByRepoIdStatusSvg = (options: Options<GetBadgesByRepoIdStatusSvgData>) => { return (options?.client ?? client).get<GetBadgesByRepoIdStatusSvgResponse, GetBadgesByRepoIdStatusSvgError>({
    ...options,
    url: '/badges/{repo_id}/status.svg'
}); };

/**
 * List available pprof profiles (HTML)
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprof = (options: Options<GetDebugPprofData>) => { return (options?.client ?? client).get<GetDebugPprofResponse, GetDebugPprofError>({
    ...options,
    url: '/debug/pprof'
}); };

/**
 * Get pprof stack traces that led to blocking on synchronization primitives
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprofBlock = (options: Options<GetDebugPprofBlockData>) => { return (options?.client ?? client).get<GetDebugPprofBlockResponse, GetDebugPprofBlockError>({
    ...options,
    url: '/debug/pprof/block'
}); };

/**
 * Get the command line invocation of the current program
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprofCmdline = (options: Options<GetDebugPprofCmdlineData>) => { return (options?.client ?? client).get<GetDebugPprofCmdlineResponse, GetDebugPprofCmdlineError>({
    ...options,
    url: '/debug/pprof/cmdline'
}); };

/**
 * Get pprof stack traces of all current goroutines
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprofGoroutine = (options: Options<GetDebugPprofGoroutineData>) => { return (options?.client ?? client).get<GetDebugPprofGoroutineResponse, GetDebugPprofGoroutineError>({
    ...options,
    url: '/debug/pprof/goroutine'
}); };

/**
 * Get pprof heap dump, a sampling of memory allocations of live objects
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprofHeap = (options: Options<GetDebugPprofHeapData>) => { return (options?.client ?? client).get<GetDebugPprofHeapResponse, GetDebugPprofHeapError>({
    ...options,
    url: '/debug/pprof/heap'
}); };

/**
 * Get pprof CPU profile
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 * After you get the profile file, use the go tool pprof command to investigate the profile.
 */
export const getDebugPprofProfile = (options: Options<GetDebugPprofProfileData>) => { return (options?.client ?? client).get<GetDebugPprofProfileResponse, GetDebugPprofProfileError>({
    ...options,
    url: '/debug/pprof/profile'
}); };

/**
 * Get pprof program counters mapping to function names
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 * Looks up the program counters listed in the request,
 * responding with a table mapping program counters to function names.
 * The requested program counters can be provided via GET + query parameters,
 * or POST + body parameters. Program counters shall be space delimited.
 */
export const getDebugPprofSymbol = (options: Options<GetDebugPprofSymbolData>) => { return (options?.client ?? client).get<GetDebugPprofSymbolResponse, GetDebugPprofSymbolError>({
    ...options,
    url: '/debug/pprof/symbol'
}); };

/**
 * Get pprof program counters mapping to function names
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 * Looks up the program counters listed in the request,
 * responding with a table mapping program counters to function names.
 * The requested program counters can be provided via GET + query parameters,
 * or POST + body parameters. Program counters shall be space delimited.
 */
export const postDebugPprofSymbol = (options: Options<PostDebugPprofSymbolData>) => { return (options?.client ?? client).post<PostDebugPprofSymbolResponse, PostDebugPprofSymbolError>({
    ...options,
    url: '/debug/pprof/symbol'
}); };

/**
 * Get pprof stack traces that led to the creation of new OS threads
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 */
export const getDebugPprofThreadcreate = (options: Options<GetDebugPprofThreadcreateData>) => { return (options?.client ?? client).get<GetDebugPprofThreadcreateResponse, GetDebugPprofThreadcreateError>({
    ...options,
    url: '/debug/pprof/threadcreate'
}); };

/**
 * Get a trace of execution of the current program
 * Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
 * After you get the profile file, use the go tool pprof command to investigate the profile.
 */
export const getDebugPprofTrace = (options: Options<GetDebugPprofTraceData>) => { return (options?.client ?? client).get<GetDebugPprofTraceResponse, GetDebugPprofTraceError>({
    ...options,
    url: '/debug/pprof/trace'
}); };

/**
 * List forges
 */
export const getForges = (options?: Options<GetForgesData>) => { return (options?.client ?? client).get<GetForgesResponse, GetForgesError>({
    ...options,
    url: '/forges'
}); };

/**
 * Create a new forge
 * Creates a new forge with a random token
 */
export const postForges = (options: Options<PostForgesData>) => { return (options?.client ?? client).post<PostForgesResponse, PostForgesError>({
    ...options,
    url: '/forges'
}); };

/**
 * Delete a forge
 */
export const deleteForgesByForgeId = (options: Options<DeleteForgesByForgeIdData>) => { return (options?.client ?? client).delete<DeleteForgesByForgeIdResponse, DeleteForgesByForgeIdError>({
    ...options,
    url: '/forges/{forgeId}'
}); };

/**
 * Get a forge
 */
export const getForgesByForgeId = (options: Options<GetForgesByForgeIdData>) => { return (options?.client ?? client).get<GetForgesByForgeIdResponse, GetForgesByForgeIdError>({
    ...options,
    url: '/forges/{forgeId}'
}); };

/**
 * Update a forge
 */
export const patchForgesByForgeId = (options: Options<PatchForgesByForgeIdData>) => { return (options?.client ?? client).patch<PatchForgesByForgeIdResponse, PatchForgesByForgeIdError>({
    ...options,
    url: '/forges/{forgeId}'
}); };

/**
 * Health information
 * If everything is fine, just a 204 will be returned, a 500 signals server state is unhealthy.
 */
export const getHealthz = (options?: Options) => { return (options?.client ?? client).get<GetHealthzResponse, GetHealthzError>({
    ...options,
    url: '/healthz'
}); };

/**
 * Incoming webhook from forge
 */
export const postHook = (options: Options<PostHookData>) => { return (options?.client ?? client).post<PostHookResponse, PostHookError>({
    ...options,
    url: '/hook'
}); };

/**
 * Current log level
 * Endpoint returns the current logging level. Requires admin rights.
 */
export const getLogLevel = (options?: Options) => { return (options?.client ?? client).get<GetLogLevelResponse, GetLogLevelError>({
    ...options,
    url: '/log-level'
}); };

/**
 * Set log level
 * Endpoint sets the current logging level. Requires admin rights.
 */
export const postLogLevel = (options: Options<PostLogLevelData>) => { return (options?.client ?? client).post<PostLogLevelResponse, PostLogLevelError>({
    ...options,
    url: '/log-level'
}); };

/**
 * Lookup an organization by full name
 */
export const getOrgLookupByOrgFullName = (options: Options<GetOrgLookupByOrgFullNameData>) => { return (options?.client ?? client).get<GetOrgLookupByOrgFullNameResponse, GetOrgLookupByOrgFullNameError>({
    ...options,
    url: '/org/lookup/{org_full_name}'
}); };

/**
 * List organizations
 * Returns all registered orgs in the system. Requires admin rights.
 */
export const getOrgs = (options: Options<GetOrgsData>) => { return (options?.client ?? client).get<GetOrgsResponse, GetOrgsError>({
    ...options,
    url: '/orgs'
}); };

/**
 * Delete an organization
 * Deletes the given org. Requires admin rights.
 */
export const deleteOrgsById = (options: Options<DeleteOrgsByIdData>) => { return (options?.client ?? client).delete<DeleteOrgsByIdResponse, DeleteOrgsByIdError>({
    ...options,
    url: '/orgs/{id}'
}); };

/**
 * Get an organization
 */
export const getOrgsByOrgId = (options: Options<GetOrgsByOrgIdData>) => { return (options?.client ?? client).get<GetOrgsByOrgIdResponse, GetOrgsByOrgIdError>({
    ...options,
    url: '/orgs/{org_id}'
}); };

/**
 * Get the permissions of the currently authenticated user for the given organization
 */
export const getOrgsByOrgIdPermissions = (options: Options<GetOrgsByOrgIdPermissionsData>) => { return (options?.client ?? client).get<GetOrgsByOrgIdPermissionsResponse, GetOrgsByOrgIdPermissionsError>({
    ...options,
    url: '/orgs/{org_id}/permissions'
}); };

/**
 * List organization secrets
 */
export const getOrgsByOrgIdSecrets = (options: Options<GetOrgsByOrgIdSecretsData>) => { return (options?.client ?? client).get<GetOrgsByOrgIdSecretsResponse, GetOrgsByOrgIdSecretsError>({
    ...options,
    url: '/orgs/{org_id}/secrets'
}); };

/**
 * Create an organization secret
 */
export const postOrgsByOrgIdSecrets = (options: Options<PostOrgsByOrgIdSecretsData>) => { return (options?.client ?? client).post<PostOrgsByOrgIdSecretsResponse, PostOrgsByOrgIdSecretsError>({
    ...options,
    url: '/orgs/{org_id}/secrets'
}); };

/**
 * Delete an organization secret by name
 */
export const deleteOrgsByOrgIdSecretsBySecret = (options: Options<DeleteOrgsByOrgIdSecretsBySecretData>) => { return (options?.client ?? client).delete<DeleteOrgsByOrgIdSecretsBySecretResponse, DeleteOrgsByOrgIdSecretsBySecretError>({
    ...options,
    url: '/orgs/{org_id}/secrets/{secret}'
}); };

/**
 * Get a organization secret by name
 */
export const getOrgsByOrgIdSecretsBySecret = (options: Options<GetOrgsByOrgIdSecretsBySecretData>) => { return (options?.client ?? client).get<GetOrgsByOrgIdSecretsBySecretResponse, GetOrgsByOrgIdSecretsBySecretError>({
    ...options,
    url: '/orgs/{org_id}/secrets/{secret}'
}); };

/**
 * Update an organization secret by name
 */
export const patchOrgsByOrgIdSecretsBySecret = (options: Options<PatchOrgsByOrgIdSecretsBySecretData>) => { return (options?.client ?? client).patch<PatchOrgsByOrgIdSecretsBySecretResponse, PatchOrgsByOrgIdSecretsBySecretError>({
    ...options,
    url: '/orgs/{org_id}/secrets/{secret}'
}); };

/**
 * List pipelines in queue
 */
export const getPipelines = (options: Options<GetPipelinesData>) => { return (options?.client ?? client).get<GetPipelinesResponse, GetPipelinesError>({
    ...options,
    url: '/pipelines'
}); };

/**
 * Get pipeline queue information
 * TODO: link the InfoT response object - this is blocked, until the `swaggo/swag` tool dependency is v1.18.12 or newer
 */
export const getQueueInfo = (options: Options<GetQueueInfoData>) => { return (options?.client ?? client).get<GetQueueInfoResponse, GetQueueInfoError>({
    ...options,
    url: '/queue/info'
}); };

/**
 * Block til pipeline queue has a running item
 */
export const getQueueNorunningpipelines = (options: Options<GetQueueNorunningpipelinesData>) => { return (options?.client ?? client).get<GetQueueNorunningpipelinesResponse, GetQueueNorunningpipelinesError>({
    ...options,
    url: '/queue/norunningpipelines'
}); };

/**
 * Pause the pipeline queue
 */
export const postQueuePause = (options: Options<PostQueuePauseData>) => { return (options?.client ?? client).post<PostQueuePauseResponse, PostQueuePauseError>({
    ...options,
    url: '/queue/pause'
}); };

/**
 * Resume the pipeline queue
 */
export const postQueueResume = (options: Options<PostQueueResumeData>) => { return (options?.client ?? client).post<PostQueueResumeResponse, PostQueueResumeError>({
    ...options,
    url: '/queue/resume'
}); };

/**
 * List all repositories on the server
 * Returns a list of all repositories. Requires admin rights.
 */
export const getRepos = (options: Options<GetReposData>) => { return (options?.client ?? client).get<GetReposResponse, GetReposError>({
    ...options,
    url: '/repos'
}); };

/**
 * Activate a repository
 */
export const postRepos = (options: Options<PostReposData>) => { return (options?.client ?? client).post<PostReposResponse, PostReposError>({
    ...options,
    url: '/repos'
}); };

/**
 * Lookup a repository by full name
 */
export const getReposLookupByRepoFullName = (options: Options<GetReposLookupByRepoFullNameData>) => { return (options?.client ?? client).get<GetReposLookupByRepoFullNameResponse, GetReposLookupByRepoFullNameError>({
    ...options,
    url: '/repos/lookup/{repo_full_name}'
}); };

/**
 * Repair all repositories on the server
 * Executes a repair process on all repositories. Requires admin rights.
 */
export const postReposRepair = (options: Options<PostReposRepairData>) => { return (options?.client ?? client).post<PostReposRepairResponse, PostReposRepairError>({
    ...options,
    url: '/repos/repair'
}); };

/**
 * Delete a repository
 */
export const deleteReposByRepoId = (options: Options<DeleteReposByRepoIdData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdResponse, DeleteReposByRepoIdError>({
    ...options,
    url: '/repos/{repo_id}'
}); };

/**
 * Get a repository
 */
export const getReposByRepoId = (options: Options<GetReposByRepoIdData>) => { return (options?.client ?? client).get<GetReposByRepoIdResponse, GetReposByRepoIdError>({
    ...options,
    url: '/repos/{repo_id}'
}); };

/**
 * Update a repository
 */
export const patchReposByRepoId = (options: Options<PatchReposByRepoIdData>) => { return (options?.client ?? client).patch<PatchReposByRepoIdResponse, PatchReposByRepoIdError>({
    ...options,
    url: '/repos/{repo_id}'
}); };

/**
 * Get branches of a repository
 */
export const getReposByRepoIdBranches = (options: Options<GetReposByRepoIdBranchesData>) => { return (options?.client ?? client).get<GetReposByRepoIdBranchesResponse, GetReposByRepoIdBranchesError>({
    ...options,
    url: '/repos/{repo_id}/branches'
}); };

/**
 * Change a repository's owner to the currently authenticated user
 */
export const postReposByRepoIdChown = (options: Options<PostReposByRepoIdChownData>) => { return (options?.client ?? client).post<PostReposByRepoIdChownResponse, PostReposByRepoIdChownError>({
    ...options,
    url: '/repos/{repo_id}/chown'
}); };

/**
 * List cron jobs
 */
export const getReposByRepoIdCron = (options: Options<GetReposByRepoIdCronData>) => { return (options?.client ?? client).get<GetReposByRepoIdCronResponse, GetReposByRepoIdCronError>({
    ...options,
    url: '/repos/{repo_id}/cron'
}); };

/**
 * Create a cron job
 */
export const postReposByRepoIdCron = (options: Options<PostReposByRepoIdCronData>) => { return (options?.client ?? client).post<PostReposByRepoIdCronResponse, PostReposByRepoIdCronError>({
    ...options,
    url: '/repos/{repo_id}/cron'
}); };

/**
 * Delete a cron job
 */
export const deleteReposByRepoIdCronByCron = (options: Options<DeleteReposByRepoIdCronByCronData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdCronByCronResponse, DeleteReposByRepoIdCronByCronError>({
    ...options,
    url: '/repos/{repo_id}/cron/{cron}'
}); };

/**
 * Get a cron job
 */
export const getReposByRepoIdCronByCron = (options: Options<GetReposByRepoIdCronByCronData>) => { return (options?.client ?? client).get<GetReposByRepoIdCronByCronResponse, GetReposByRepoIdCronByCronError>({
    ...options,
    url: '/repos/{repo_id}/cron/{cron}'
}); };

/**
 * Update a cron job
 */
export const patchReposByRepoIdCronByCron = (options: Options<PatchReposByRepoIdCronByCronData>) => { return (options?.client ?? client).patch<PatchReposByRepoIdCronByCronResponse, PatchReposByRepoIdCronByCronError>({
    ...options,
    url: '/repos/{repo_id}/cron/{cron}'
}); };

/**
 * Start a cron job now
 */
export const postReposByRepoIdCronByCron = (options: Options<PostReposByRepoIdCronByCronData>) => { return (options?.client ?? client).post<PostReposByRepoIdCronByCronResponse, PostReposByRepoIdCronByCronError>({
    ...options,
    url: '/repos/{repo_id}/cron/{cron}'
}); };

/**
 * Deletes all logs of a pipeline
 */
export const deleteReposByRepoIdLogsByNumber = (options: Options<DeleteReposByRepoIdLogsByNumberData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdLogsByNumberResponse, DeleteReposByRepoIdLogsByNumberError>({
    ...options,
    url: '/repos/{repo_id}/logs/{number}'
}); };

/**
 * Get logs for a pipeline step
 */
export const getReposByRepoIdLogsByNumberByStepId = (options: Options<GetReposByRepoIdLogsByNumberByStepIdData>) => { return (options?.client ?? client).get<GetReposByRepoIdLogsByNumberByStepIdResponse, GetReposByRepoIdLogsByNumberByStepIdError>({
    ...options,
    url: '/repos/{repo_id}/logs/{number}/{stepID}'
}); };

/**
 * Delete step logs of a pipeline
 */
export const deleteReposByRepoIdLogsByNumberByStepId = (options: Options<DeleteReposByRepoIdLogsByNumberByStepIdData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdLogsByNumberByStepIdResponse, DeleteReposByRepoIdLogsByNumberByStepIdError>({
    ...options,
    url: '/repos/{repo_id}/logs/{number}/{stepId}'
}); };

/**
 * Move a repository to a new owner
 */
export const postReposByRepoIdMove = (options: Options<PostReposByRepoIdMoveData>) => { return (options?.client ?? client).post<PostReposByRepoIdMoveResponse, PostReposByRepoIdMoveError>({
    ...options,
    url: '/repos/{repo_id}/move'
}); };

/**
 * Check current authenticated users access to the repository
 * The repository permission, according to the used access token.
 */
export const getReposByRepoIdPermissions = (options: Options<GetReposByRepoIdPermissionsData>) => { return (options?.client ?? client).get<GetReposByRepoIdPermissionsResponse, GetReposByRepoIdPermissionsError>({
    ...options,
    url: '/repos/{repo_id}/permissions'
}); };

/**
 * List repository pipelines
 * Get a list of pipelines for a repository.
 */
export const getReposByRepoIdPipelines = (options: Options<GetReposByRepoIdPipelinesData>) => { return (options?.client ?? client).get<GetReposByRepoIdPipelinesResponse, GetReposByRepoIdPipelinesError>({
    ...options,
    url: '/repos/{repo_id}/pipelines'
}); };

/**
 * Trigger a manual pipeline
 */
export const postReposByRepoIdPipelines = (options: Options<PostReposByRepoIdPipelinesData>) => { return (options?.client ?? client).post<PostReposByRepoIdPipelinesResponse, PostReposByRepoIdPipelinesError>({
    ...options,
    url: '/repos/{repo_id}/pipelines'
}); };

/**
 * Delete a pipeline
 */
export const deleteReposByRepoIdPipelinesByNumber = (options: Options<DeleteReposByRepoIdPipelinesByNumberData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdPipelinesByNumberResponse, DeleteReposByRepoIdPipelinesByNumberError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}'
}); };

/**
 * Get a repositories pipeline
 */
export const getReposByRepoIdPipelinesByNumber = (options: Options<GetReposByRepoIdPipelinesByNumberData>) => { return (options?.client ?? client).get<GetReposByRepoIdPipelinesByNumberResponse, GetReposByRepoIdPipelinesByNumberError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}'
}); };

/**
 * Restart a pipeline
 * Restarts a pipeline optional with altered event, deploy or environment
 */
export const postReposByRepoIdPipelinesByNumber = (options: Options<PostReposByRepoIdPipelinesByNumberData>) => { return (options?.client ?? client).post<PostReposByRepoIdPipelinesByNumberResponse, PostReposByRepoIdPipelinesByNumberError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}'
}); };

/**
 * Approve and start a pipeline
 */
export const postReposByRepoIdPipelinesByNumberApprove = (options: Options<PostReposByRepoIdPipelinesByNumberApproveData>) => { return (options?.client ?? client).post<PostReposByRepoIdPipelinesByNumberApproveResponse, PostReposByRepoIdPipelinesByNumberApproveError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}/approve'
}); };

/**
 * Cancel a pipeline
 */
export const postReposByRepoIdPipelinesByNumberCancel = (options: Options<PostReposByRepoIdPipelinesByNumberCancelData>) => { return (options?.client ?? client).post<PostReposByRepoIdPipelinesByNumberCancelResponse, PostReposByRepoIdPipelinesByNumberCancelError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}/cancel'
}); };

/**
 * Get configuration files for a pipeline
 */
export const getReposByRepoIdPipelinesByNumberConfig = (options: Options<GetReposByRepoIdPipelinesByNumberConfigData>) => { return (options?.client ?? client).get<GetReposByRepoIdPipelinesByNumberConfigResponse, GetReposByRepoIdPipelinesByNumberConfigError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}/config'
}); };

/**
 * Decline a pipeline
 */
export const postReposByRepoIdPipelinesByNumberDecline = (options: Options<PostReposByRepoIdPipelinesByNumberDeclineData>) => { return (options?.client ?? client).post<PostReposByRepoIdPipelinesByNumberDeclineResponse, PostReposByRepoIdPipelinesByNumberDeclineError>({
    ...options,
    url: '/repos/{repo_id}/pipelines/{number}/decline'
}); };

/**
 * List active pull requests of a repository
 */
export const getReposByRepoIdPullRequests = (options: Options<GetReposByRepoIdPullRequestsData>) => { return (options?.client ?? client).get<GetReposByRepoIdPullRequestsResponse, GetReposByRepoIdPullRequestsError>({
    ...options,
    url: '/repos/{repo_id}/pull_requests'
}); };

/**
 * List registries
 */
export const getReposByRepoIdRegistry = (options: Options<GetReposByRepoIdRegistryData>) => { return (options?.client ?? client).get<GetReposByRepoIdRegistryResponse, GetReposByRepoIdRegistryError>({
    ...options,
    url: '/repos/{repo_id}/registry'
}); };

/**
 * Create a registry
 */
export const postReposByRepoIdRegistry = (options: Options<PostReposByRepoIdRegistryData>) => { return (options?.client ?? client).post<PostReposByRepoIdRegistryResponse, PostReposByRepoIdRegistryError>({
    ...options,
    url: '/repos/{repo_id}/registry'
}); };

/**
 * Delete a registry by name
 */
export const deleteReposByRepoIdRegistryByRegistry = (options: Options<DeleteReposByRepoIdRegistryByRegistryData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdRegistryByRegistryResponse, DeleteReposByRepoIdRegistryByRegistryError>({
    ...options,
    url: '/repos/{repo_id}/registry/{registry}'
}); };

/**
 * Get a registry by name
 */
export const getReposByRepoIdRegistryByRegistry = (options: Options<GetReposByRepoIdRegistryByRegistryData>) => { return (options?.client ?? client).get<GetReposByRepoIdRegistryByRegistryResponse, GetReposByRepoIdRegistryByRegistryError>({
    ...options,
    url: '/repos/{repo_id}/registry/{registry}'
}); };

/**
 * Update a registry by name
 */
export const patchReposByRepoIdRegistryByRegistry = (options: Options<PatchReposByRepoIdRegistryByRegistryData>) => { return (options?.client ?? client).patch<PatchReposByRepoIdRegistryByRegistryResponse, PatchReposByRepoIdRegistryByRegistryError>({
    ...options,
    url: '/repos/{repo_id}/registry/{registry}'
}); };

/**
 * Repair a repository
 */
export const postReposByRepoIdRepair = (options: Options<PostReposByRepoIdRepairData>) => { return (options?.client ?? client).post<PostReposByRepoIdRepairResponse, PostReposByRepoIdRepairError>({
    ...options,
    url: '/repos/{repo_id}/repair'
}); };

/**
 * List repository secrets
 */
export const getReposByRepoIdSecrets = (options: Options<GetReposByRepoIdSecretsData>) => { return (options?.client ?? client).get<GetReposByRepoIdSecretsResponse, GetReposByRepoIdSecretsError>({
    ...options,
    url: '/repos/{repo_id}/secrets'
}); };

/**
 * Create a repository secret
 */
export const postReposByRepoIdSecrets = (options: Options<PostReposByRepoIdSecretsData>) => { return (options?.client ?? client).post<PostReposByRepoIdSecretsResponse, PostReposByRepoIdSecretsError>({
    ...options,
    url: '/repos/{repo_id}/secrets'
}); };

/**
 * Delete a repository secret by name
 */
export const deleteReposByRepoIdSecretsBySecretName = (options: Options<DeleteReposByRepoIdSecretsBySecretNameData>) => { return (options?.client ?? client).delete<DeleteReposByRepoIdSecretsBySecretNameResponse, DeleteReposByRepoIdSecretsBySecretNameError>({
    ...options,
    url: '/repos/{repo_id}/secrets/{secretName}'
}); };

/**
 * Get a repository secret by name
 */
export const getReposByRepoIdSecretsBySecretName = (options: Options<GetReposByRepoIdSecretsBySecretNameData>) => { return (options?.client ?? client).get<GetReposByRepoIdSecretsBySecretNameResponse, GetReposByRepoIdSecretsBySecretNameError>({
    ...options,
    url: '/repos/{repo_id}/secrets/{secretName}'
}); };

/**
 * Update a repository secret by name
 */
export const patchReposByRepoIdSecretsBySecretName = (options: Options<PatchReposByRepoIdSecretsBySecretNameData>) => { return (options?.client ?? client).patch<PatchReposByRepoIdSecretsBySecretNameResponse, PatchReposByRepoIdSecretsBySecretNameError>({
    ...options,
    url: '/repos/{repo_id}/secrets/{secretName}'
}); };

/**
 * List global secrets
 */
export const getSecrets = (options: Options<GetSecretsData>) => { return (options?.client ?? client).get<GetSecretsResponse, GetSecretsError>({
    ...options,
    url: '/secrets'
}); };

/**
 * Create a global secret
 */
export const postSecrets = (options: Options<PostSecretsData>) => { return (options?.client ?? client).post<PostSecretsResponse, PostSecretsError>({
    ...options,
    url: '/secrets'
}); };

/**
 * Delete a global secret by name
 */
export const deleteSecretsBySecret = (options: Options<DeleteSecretsBySecretData>) => { return (options?.client ?? client).delete<DeleteSecretsBySecretResponse, DeleteSecretsBySecretError>({
    ...options,
    url: '/secrets/{secret}'
}); };

/**
 * Get a global secret by name
 */
export const getSecretsBySecret = (options: Options<GetSecretsBySecretData>) => { return (options?.client ?? client).get<GetSecretsBySecretResponse, GetSecretsBySecretError>({
    ...options,
    url: '/secrets/{secret}'
}); };

/**
 * Update a global secret by name
 */
export const patchSecretsBySecret = (options: Options<PatchSecretsBySecretData>) => { return (options?.client ?? client).patch<PatchSecretsBySecretResponse, PatchSecretsBySecretError>({
    ...options,
    url: '/secrets/{secret}'
}); };

/**
 * Get server's signature public key
 */
export const getSignaturePublicKey = (options: Options<GetSignaturePublicKeyData>) => { return (options?.client ?? client).get<GetSignaturePublicKeyResponse, GetSignaturePublicKeyError>({
    ...options,
    url: '/signature/public-key'
}); };

/**
 * Stream events like pipeline updates
 * With quic and http2 support
 */
export const getStreamEvents = (options?: Options) => { return (options?.client ?? client).get<GetStreamEventsResponse, GetStreamEventsError>({
    ...options,
    url: '/stream/events'
}); };

/**
 * Stream logs of a pipeline step
 */
export const getStreamLogsByRepoIdByPipelineByStepId = (options: Options<GetStreamLogsByRepoIdByPipelineByStepIdData>) => { return (options?.client ?? client).get<GetStreamLogsByRepoIdByPipelineByStepIdResponse, GetStreamLogsByRepoIdByPipelineByStepIdError>({
    ...options,
    url: '/stream/logs/{repo_id}/{pipeline}/{stepID}'
}); };

/**
 * Get the currently authenticated user
 */
export const getUser = (options: Options<GetUserData>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError>({
    ...options,
    url: '/user'
}); };

/**
 * Get the currently authenticated users pipeline feed
 * The feed lists the most recent pipeline for the currently authenticated user.
 */
export const getUserFeed = (options: Options<GetUserFeedData>) => { return (options?.client ?? client).get<GetUserFeedResponse, GetUserFeedError>({
    ...options,
    url: '/user/feed'
}); };

/**
 * Get user's repositories
 * Retrieve the currently authenticated User's Repository list
 */
export const getUserRepos = (options: Options<GetUserReposData>) => { return (options?.client ?? client).get<GetUserReposResponse, GetUserReposError>({
    ...options,
    url: '/user/repos'
}); };

/**
 * Reset a token
 * Reset's the current personal access token of the user and returns a new one.
 */
export const deleteUserToken = (options: Options<DeleteUserTokenData>) => { return (options?.client ?? client).delete<DeleteUserTokenResponse, DeleteUserTokenError>({
    ...options,
    url: '/user/token'
}); };

/**
 * Return the token of the current user as string
 */
export const postUserToken = (options: Options<PostUserTokenData>) => { return (options?.client ?? client).post<PostUserTokenResponse, PostUserTokenError>({
    ...options,
    url: '/user/token'
}); };

/**
 * List users
 * Returns all registered, active users in the system. Requires admin rights.
 */
export const getUsers = (options: Options<GetUsersData>) => { return (options?.client ?? client).get<GetUsersResponse, GetUsersError>({
    ...options,
    url: '/users'
}); };

/**
 * Create a user
 * Creates a new user account with the specified external login. Requires admin rights.
 */
export const postUsers = (options: Options<PostUsersData>) => { return (options?.client ?? client).post<PostUsersResponse, PostUsersError>({
    ...options,
    url: '/users'
}); };

/**
 * Delete a user
 * Deletes the given user. Requires admin rights.
 */
export const deleteUsersByLogin = (options: Options<DeleteUsersByLoginData>) => { return (options?.client ?? client).delete<DeleteUsersByLoginResponse, DeleteUsersByLoginError>({
    ...options,
    url: '/users/{login}'
}); };

/**
 * Get a user
 * Returns a user with the specified login name. Requires admin rights.
 */
export const getUsersByLogin = (options: Options<GetUsersByLoginData>) => { return (options?.client ?? client).get<GetUsersByLoginResponse, GetUsersByLoginError>({
    ...options,
    url: '/users/{login}'
}); };

/**
 * Update a user
 * Changes the data of an existing user. Requires admin rights.
 */
export const patchUsersByLogin = (options: Options<PatchUsersByLoginData>) => { return (options?.client ?? client).patch<PatchUsersByLoginResponse, PatchUsersByLoginError>({
    ...options,
    url: '/users/{login}'
}); };

/**
 * Get version
 * Endpoint returns the server version and build information.
 */
export const getVersion = (options?: Options) => { return (options?.client ?? client).get<GetVersionResponse, GetVersionError>({
    ...options,
    url: '/version'
}); };