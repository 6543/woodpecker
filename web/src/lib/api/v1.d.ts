/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List agents */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new agent
         * @description Creates a new agent with a random token
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the agent's data (only 'name' and 'no_schedule' are read) */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Agent"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/{agent}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an agent */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the agent's id */
                    agent: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an agent */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the agent's id */
                    agent: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update an agent */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the agent's id */
                    agent: number;
                };
                cookie?: never;
            };
            /** @description the agent's data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Agent"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Agent"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/agents/{agent}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List agent tasks */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the agent's id */
                    agent: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Task"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges/{repo_id}/cc.xml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Provide pipeline status information to the CCMenu tool
         * @description CCMenu displays the pipeline status of projects on a CI server as an item in the Mac's menu bar.
         *     More details on how to install, you can find at http://ccmenu.org/
         *     The response format adheres to CCTray v1 Specification, https://cctray.org/v1/
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/badges/{repo_id}/status.svg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of pipeline as SVG badge */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available pprof profiles (HTML)
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof stack traces that led to blocking on synchronization primitives
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/cmdline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the command line invocation of the current program
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/goroutine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof stack traces of all current goroutines
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: {
                    /** @description Use debug=2 as a query parameter to export in the same format as an un-recovered panic */
                    debug?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/heap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof heap dump, a sampling of memory allocations of live objects
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: {
                    /** @description You can specify gc=heap to run GC before taking the heap sample */
                    gc?: string;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof CPU profile
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         *     After you get the profile file, use the go tool pprof command to investigate the profile.
         */
        get: {
            parameters: {
                query: {
                    /** @description You can specify the duration in the seconds GET parameter. */
                    seconds: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/symbol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof program counters mapping to function names
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         *     Looks up the program counters listed in the request,
         *     responding with a table mapping program counters to function names.
         *     The requested program counters can be provided via GET + query parameters,
         *     or POST + body parameters. Program counters shall be space delimited.
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Get pprof program counters mapping to function names
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         *     Looks up the program counters listed in the request,
         *     responding with a table mapping program counters to function names.
         *     The requested program counters can be provided via GET + query parameters,
         *     or POST + body parameters. Program counters shall be space delimited.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/threadcreate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pprof stack traces that led to the creation of new OS threads
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/pprof/trace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a trace of execution of the current program
         * @description Only available, when server was started with WOODPECKER_LOG_LEVEL=debug
         *     After you get the profile file, use the go tool pprof command to investigate the profile.
         */
        get: {
            parameters: {
                query: {
                    /** @description You can specify the duration in the seconds GET parameter. */
                    seconds: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List forges */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header?: {
                    /** @description Insert your personal access token */
                    Authorization?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forge"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new forge
         * @description Creates a new forge with a random token
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the forge's data (only 'name' and 'no_schedule' are read) */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Forge"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forge"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/forges/{forgeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a forge */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Insert your personal access token */
                    Authorization?: string;
                };
                path: {
                    /** @description the forge's id */
                    forgeId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forge"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a forge */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the forge's id */
                    forgeId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a forge */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the forge's id */
                    forgeId: number;
                };
                cookie?: never;
            };
            /** @description the forge's data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Forge"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forge"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health information
         * @description If everything is fine, just a 204 will be returned, a 500 signals server state is unhealthy.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Incoming webhook from forge */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description the webhook payload; forge is automatically detected */
            requestBody: {
                content: {
                    "*/*": Record<string, never>;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Current log level
         * @description Endpoint returns the current logging level. Requires admin rights.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            "log-level"?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Set log level
         * @description Endpoint sets the current logging level. Requires admin rights.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the new log level, one of <debug,trace,info,warn,error,fatal,panic,disabled> */
            requestBody: {
                content: {
                    "*/*": {
                        "log-level"?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            "log-level"?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/org/lookup/{org_full_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup an organization by full name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the organizations full name / slug */
                    org_full_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Org"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations
         * @description Returns all registered orgs in the system. Requires admin rights.
         */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Org"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an organization
         * @description Deletes the given org. Requires admin rights.
         */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organization */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the organization's id */
                    org_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Org"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the permissions of the currently authenticated user for the given organization */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the organization's id */
                    org_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrgPerm"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}/registries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization registries */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"][];
                    };
                };
            };
        };
        put?: never;
        /** Create an organization registry */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                };
                cookie?: never;
            };
            /** @description the new registry */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}/registries/{registry}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a organization registry by address */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the registry's address */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an organization registry by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the registry's name */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update an organization registry by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the registry's name */
                    registry: string;
                };
                cookie?: never;
            };
            /** @description the update registry data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/orgs/{org_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization secrets */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"][];
                    };
                };
            };
        };
        put?: never;
        /** Create an organization secret */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                };
                cookie?: never;
            };
            /** @description the new secret */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}/secrets/{secret}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a organization secret by name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete an organization secret by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update an organization secret by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the org's id */
                    org_id: string;
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            /** @description the update secret data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/pipelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List pipelines in queue */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feed"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pipeline queue information
         * @description TODO: link the InfoT response object - this is blocked, until the `swaggo/swag` tool dependency is v1.18.12 or newer
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string | undefined;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/norunningpipelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Block til pipeline queue has a running item */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause the pipeline queue */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume the pipeline queue */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List global registries */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a global registry */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the registry object data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registries/{registry}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a global registry by name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the registry's name */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a global registry by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the registry's name */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a global registry by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the registry's name */
                    registry: string;
                };
                cookie?: never;
            };
            /** @description the registry's data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all repositories on the server
         * @description Returns a list of all repositories. Requires admin rights.
         */
        get: {
            parameters: {
                query?: {
                    /** @description only list active repos */
                    active?: boolean;
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"][];
                    };
                };
            };
        };
        put?: never;
        /** Activate a repository */
        post: {
            parameters: {
                query: {
                    /** @description the id of a repository at the forge */
                    forge_remote_id: string;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/lookup/{repo_full_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup a repository by full name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository full name / slug */
                    repo_full_name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/repair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Repair all repositories on the server
         * @description Executes a repair process on all repositories. Requires admin rights.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a repository */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a repository */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a repository */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            /** @description the repository's information */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["RepoPatch"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/repos/{repo_id}/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branches of a repository */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/chown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change a repository's owner to the currently authenticated user */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/cron": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List cron jobs */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cron"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a cron job */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            /** @description the new cron job */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Cron"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cron"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/cron/{cron}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a cron job */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the cron job id */
                    cron: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cron"];
                    };
                };
            };
        };
        put?: never;
        /** Start a cron job now */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the cron job id */
                    cron: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        /** Delete a cron job */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the cron job id */
                    cron: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a cron job */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the cron job id */
                    cron: string;
                };
                cookie?: never;
            };
            /** @description the cron job data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Cron"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Cron"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/repos/{repo_id}/logs/{number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes all logs of a pipeline */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/logs/{number}/{stepID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get logs for a pipeline step */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                    /** @description the step id */
                    stepID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/logs/{number}/{stepId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete step logs of a pipeline */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                    /** @description the step id */
                    stepId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move a repository to a new owner */
        post: {
            parameters: {
                query: {
                    /** @description the username to move the repository to */
                    to: string;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check current authenticated users access to the repository
         * @description The repository permission, according to the used access token.
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Perm"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository pipelines
         * @description Get a list of pipelines for a repository.
         */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                    /** @description only return pipelines before this RFC3339 date */
                    before?: string;
                    /** @description only return pipelines after this RFC3339 date */
                    after?: string;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"][];
                    };
                };
            };
        };
        put?: never;
        /** Trigger a manual pipeline */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            /** @description the options for the pipeline to run */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["PipelineOptions"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines/{number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a repositories pipeline */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline, OR 'latest' */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Restart a pipeline
         * @description Restarts a pipeline optional with altered event, deploy or environment
         */
        post: {
            parameters: {
                query?: {
                    /** @description override the event type */
                    event?: string;
                    /** @description override the target deploy value */
                    deploy_to?: string;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        /** Delete a pipeline */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines/{number}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve and start a pipeline */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines/{number}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a pipeline */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines/{number}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get configuration files for a pipeline */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Config"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pipelines/{number}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Decline a pipeline */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    number: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pipeline"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/pull_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active pull requests of a repository */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PullRequest"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/registries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List registries */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a registry */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            /** @description the new registry data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/registries/{registry}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a registry by name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the registry name */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a registry by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the registry name */
                    registry: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a registry by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the registry name */
                    registry: string;
                };
                cookie?: never;
            };
            /** @description the attributes for the registry */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Registry"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registry"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/repos/{repo_id}/repair": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Repair a repository */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repository secrets */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a repository secret */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                };
                cookie?: never;
            };
            /** @description the new secret */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{repo_id}/secrets/{secretName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a repository secret by name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the secret name */
                    secretName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a repository secret by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the secret name */
                    secretName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a repository secret by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the secret name */
                    secretName: string;
                };
                cookie?: never;
            };
            /** @description the secret itself */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List global secrets */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a global secret */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the secret object data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secrets/{secret}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a global secret by name */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a global secret by name */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a global secret by name */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the secret's name */
                    secret: string;
                };
                cookie?: never;
            };
            /** @description the secret's data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["Secret"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Secret"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/signature/public-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get server's signature public key */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stream/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream events like pipeline updates
         * @description With quic and http2 support
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stream/logs/{repo_id}/{pipeline}/{stepID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stream logs of a pipeline step */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description the repository id */
                    repo_id: number;
                    /** @description the number of the pipeline */
                    pipeline: number;
                    /** @description the step id */
                    stepID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the currently authenticated user */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the currently authenticated users pipeline feed
         * @description The feed lists the most recent pipeline for the currently authenticated user.
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Feed"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's repositories
         * @description Retrieve the currently authenticated User's Repository list
         */
        get: {
            parameters: {
                query?: {
                    /** @description query all repos, including inactive ones */
                    all?: boolean;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Repo"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return the token of the current user as string */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Reset a token
         * @description Reset's the current personal access token of the user and returns a new one.
         */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Returns all registered, active users in the system. Requires admin rights.
         */
        get: {
            parameters: {
                query?: {
                    /** @description for response pagination, page offset number */
                    page?: number;
                    /** @description for response pagination, max items per page */
                    perPage?: number;
                };
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a user
         * @description Creates a new user account with the specified external login. Requires admin rights.
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description the user's data */
            requestBody: {
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{login}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user
         * @description Returns a user with the specified login name. Requires admin rights.
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the user's login name */
                    login: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description Deletes the given user. Requires admin rights.
         */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the user's login name */
                    login: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a user
         * @description Changes the data of an existing user. Requires admin rights.
         */
        patch: {
            parameters: {
                query?: never;
                header: {
                    /** @description Insert your personal access token */
                    Authorization: string;
                };
                path: {
                    /** @description the user's login name */
                    login: string;
                };
                cookie?: never;
            };
            /** @description the user's data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get version
         * @description Endpoint returns the server version and build information.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string & {
                            source?: string;
                            version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Agent: {
            backend?: string;
            capacity?: number;
            created?: number;
            id?: number;
            last_contact?: number;
            /** @description last time the agent did something, this value is used to determine if the agent is still doing work used by the autoscaler */
            last_work?: number;
            name?: string;
            no_schedule?: boolean;
            owner_id?: number;
            platform?: string;
            token?: string;
            updated?: number;
            version?: string;
        };
        Config: {
            data?: number[];
            hash?: string;
            name?: string;
        };
        Cron: {
            branch?: string;
            /** @description TODO change JSON field to "created" in 3.0 */
            created_at?: number;
            creator_id?: number;
            id?: number;
            name?: string;
            next_exec?: number;
            repo_id?: number;
            /** @description @weekly,	3min, ... */
            schedule?: string;
        };
        Feed: {
            author?: string;
            author_avatar?: string;
            author_email?: string;
            branch?: string;
            commit?: string;
            /** @description TODO change JSON field to "created" in 3.0 */
            created_at?: number;
            event?: string;
            /** @description TODO change JSON field to "finished" in 3.0 */
            finished_at?: number;
            id?: number;
            message?: string;
            number?: number;
            ref?: string;
            refspec?: string;
            repo_id?: number;
            /** @description TODO change JSON field to "started" in 3.0 */
            started_at?: number;
            status?: string;
            title?: string;
        };
        Forge: {
            additional_options?: {
                [key: string]: unknown;
            };
            client?: string;
            id?: number;
            /** @description public url for oauth if different from url */
            oauth_host?: string;
            skip_verify?: boolean;
            type?: components["schemas"]["model.ForgeType"];
            url?: string;
        };
        LogEntry: {
            data?: number[];
            id?: number;
            line?: number;
            step_id?: number;
            time?: number;
            type?: components["schemas"]["LogEntryType"];
        };
        /** @enum {integer} */
        LogEntryType: 0 | 1 | 2 | 3 | 4;
        Org: {
            forge_id?: number;
            id?: number;
            is_user?: boolean;
            name?: string;
        };
        OrgPerm: {
            admin?: boolean;
            member?: boolean;
        };
        Perm: {
            admin?: boolean;
            created?: number;
            pull?: boolean;
            push?: boolean;
            synced?: number;
            updated?: number;
        };
        Pipeline: {
            author?: string;
            author_avatar?: string;
            author_email?: string;
            branch?: string;
            changed_files?: string[];
            commit?: string;
            /** @description TODO change JSON field to "created" in 3.0 */
            created_at?: number;
            deploy_task?: string;
            deploy_to?: string;
            errors?: components["schemas"]["types.PipelineError"][];
            event?: components["schemas"]["WebhookEvent"];
            /** @description TODO change JSON field to "finished" in 3.0 */
            finished_at?: number;
            forge_url?: string;
            id?: number;
            is_prerelease?: boolean;
            message?: string;
            number?: number;
            parent?: number;
            pr_labels?: string[];
            ref?: string;
            refspec?: string;
            /** @description TODO change JSON field to "reviewed" in 3.0 */
            reviewed_at?: number;
            reviewed_by?: string;
            /** @description uses reported user for webhooks and name of cron for cron pipelines */
            sender?: string;
            /** @description TODO change JSON field to "started" in 3.0 */
            started_at?: number;
            status?: components["schemas"]["StatusValue"];
            timestamp?: number;
            title?: string;
            /** @description TODO change JSON field to "updated" in 3.0 */
            updated_at?: number;
            variables?: {
                [key: string]: string | undefined;
            };
            workflows?: components["schemas"]["model.Workflow"][];
        };
        PipelineOptions: {
            branch?: string;
            variables?: {
                [key: string]: string | undefined;
            };
        };
        PullRequest: {
            index?: string;
            title?: string;
        };
        Registry: {
            address?: string;
            id?: number;
            org_id?: number;
            password?: string;
            readonly?: boolean;
            repo_id?: number;
            username?: string;
        };
        Repo: {
            active?: boolean;
            allow_deploy?: boolean;
            allow_pr?: boolean;
            avatar_url?: string;
            cancel_previous_pipeline_events?: components["schemas"]["WebhookEvent"][];
            clone_url?: string;
            clone_url_ssh?: string;
            config_file?: string;
            default_branch?: string;
            forge_id?: number;
            /** @description ForgeRemoteID is the unique identifier for the repository on the forge. */
            forge_remote_id?: string;
            forge_url?: string;
            full_name?: string;
            gated?: boolean;
            id?: number;
            name?: string;
            netrc_only_trusted?: boolean;
            org_id?: number;
            owner?: string;
            pr_enabled?: boolean;
            private?: boolean;
            scm?: components["schemas"]["SCMKind"];
            timeout?: number;
            trusted?: boolean;
            visibility?: components["schemas"]["RepoVisibility"];
        };
        RepoPatch: {
            allow_deploy?: boolean;
            allow_pr?: boolean;
            cancel_previous_pipeline_events?: components["schemas"]["WebhookEvent"][];
            config_file?: string;
            gated?: boolean;
            netrc_only_trusted?: boolean;
            timeout?: number;
            trusted?: boolean;
            visibility?: string;
        };
        /** @enum {string} */
        RepoVisibility: "public" | "private" | "internal";
        /** @enum {string} */
        SCMKind: "git" | "hg" | "fossil" | "perforce";
        Secret: {
            events?: components["schemas"]["WebhookEvent"][];
            id?: number;
            images?: string[];
            name?: string;
            org_id?: number;
            repo_id?: number;
            value?: string;
        };
        /** @enum {string} */
        StatusValue: "skipped" | "pending" | "running" | "success" | "failure" | "killed" | "error" | "blocked" | "declined" | "created";
        Step: {
            end_time?: number;
            error?: string;
            exit_code?: number;
            id?: number;
            name?: string;
            pid?: number;
            pipeline_id?: number;
            ppid?: number;
            start_time?: number;
            state?: components["schemas"]["StatusValue"];
            type?: components["schemas"]["StepType"];
            uuid?: string;
        };
        /** @enum {string} */
        StepType: "clone" | "service" | "plugin" | "commands" | "cache";
        Task: {
            agent_id?: number;
            data?: number[];
            dep_status?: {
                [key: string]: components["schemas"]["StatusValue"] | undefined;
            };
            dependencies?: string[];
            id?: string;
            labels?: {
                [key: string]: string | undefined;
            };
            run_on?: string[];
        };
        User: {
            /** @description Admin indicates the user is a system administrator.
             *
             *     NOTE: If the username is part of the WOODPECKER_ADMIN
             *     environment variable, this value will be set to true on login. */
            admin?: boolean;
            /** @description the avatar url for this user. */
            avatar_url?: string;
            /** @description Email is the email address for this user.
             *
             *     required: true */
            email?: string;
            forge_id?: number;
            /** @description the id for this user.
             *
             *     required: true */
            id?: number;
            /** @description Login is the username for this user.
             *
             *     required: true */
            login?: string;
            /** @description OrgID is the of the user as model.Org. */
            org_id?: number;
        };
        /** @enum {string} */
        WebhookEvent: "push" | "pull_request" | "pull_request_closed" | "tag" | "release" | "deployment" | "cron" | "manual";
        /** @enum {string} */
        "model.ForgeType": "github" | "gitlab" | "gitea" | "forgejo" | "bitbucket" | "bitbucket-dc" | "addon";
        "model.Workflow": {
            agent_id?: number;
            children?: components["schemas"]["Step"][];
            end_time?: number;
            environ?: {
                [key: string]: string | undefined;
            };
            error?: string;
            id?: number;
            name?: string;
            pid?: number;
            pipeline_id?: number;
            platform?: string;
            start_time?: number;
            state?: components["schemas"]["StatusValue"];
        };
        "types.PipelineError": {
            data?: unknown;
            is_warning?: boolean;
            message?: string;
            type?: components["schemas"]["types.PipelineErrorType"];
        };
        /** @enum {string} */
        "types.PipelineErrorType": "linter" | "deprecation" | "compiler" | "generic" | "bad_habit";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
