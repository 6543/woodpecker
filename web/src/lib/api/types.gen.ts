// This file is auto-generated by @hey-api/openapi-ts

export type Agent = {
    backend?: string;
    capacity?: number;
    created?: number;
    id?: number;
    last_contact?: number;
    name?: string;
    no_schedule?: boolean;
    owner_id?: number;
    platform?: string;
    token?: string;
    updated?: number;
    version?: string;
};

export type Config = {
    data?: Array<(number)>;
    hash?: string;
    name?: string;
};

export type Cron = {
    branch?: string;
    created_at?: number;
    creator_id?: number;
    id?: number;
    name?: string;
    next_exec?: number;
    repo_id?: number;
    /**
     * @weekly,	3min, ...
     */
    schedule?: string;
};

export type Feed = {
    author?: string;
    author_avatar?: string;
    author_email?: string;
    branch?: string;
    commit?: string;
    created_at?: number;
    event?: string;
    finished_at?: number;
    id?: number;
    message?: string;
    number?: number;
    ref?: string;
    refspec?: string;
    repo_id?: number;
    started_at?: number;
    status?: string;
    title?: string;
};

export type Forge = {
    additional_options?: {
        [key: string]: unknown;
    };
    client?: string;
    id?: number;
    /**
     * public url for oauth if different from url
     */
    oauth_host?: string;
    skip_verify?: boolean;
    type?: model_ForgeType;
    url?: string;
};

export type LogEntry = {
    data?: Array<(number)>;
    id?: number;
    line?: number;
    step_id?: number;
    time?: number;
    type?: LogEntryType;
};

export type LogEntryType = 0 | 1 | 2 | 3 | 4;

export type Org = {
    forge_id?: number;
    id?: number;
    is_user?: boolean;
    name?: string;
};

export type OrgPerm = {
    admin?: boolean;
    member?: boolean;
};

export type Perm = {
    admin?: boolean;
    created?: number;
    pull?: boolean;
    push?: boolean;
    synced?: number;
    updated?: number;
};

export type Pipeline = {
    author?: string;
    author_avatar?: string;
    author_email?: string;
    branch?: string;
    changed_files?: Array<(string)>;
    commit?: string;
    created_at?: number;
    deploy_task?: string;
    deploy_to?: string;
    errors?: Array<types_PipelineError>;
    event?: WebhookEvent;
    finished_at?: number;
    forge_url?: string;
    id?: number;
    is_prerelease?: boolean;
    message?: string;
    number?: number;
    parent?: number;
    pr_labels?: Array<(string)>;
    ref?: string;
    refspec?: string;
    reviewed_at?: number;
    reviewed_by?: string;
    /**
     * uses reported user for webhooks and name of cron for cron pipelines
     */
    sender?: string;
    started_at?: number;
    status?: StatusValue;
    timestamp?: number;
    title?: string;
    updated_at?: number;
    variables?: {
        [key: string]: (string);
    };
    workflows?: Array<model_Workflow>;
};

export type PipelineOptions = {
    branch?: string;
    variables?: {
        [key: string]: (string);
    };
};

export type PullRequest = {
    index?: string;
    title?: string;
};

export type Registry = {
    address?: string;
    id?: number;
    password?: string;
    username?: string;
};

export type Repo = {
    active?: boolean;
    allow_deploy?: boolean;
    allow_pr?: boolean;
    avatar_url?: string;
    cancel_previous_pipeline_events?: Array<WebhookEvent>;
    clone_url?: string;
    clone_url_ssh?: string;
    config_file?: string;
    default_branch?: string;
    forge_id?: number;
    /**
     * ForgeRemoteID is the unique identifier for the repository on the forge.
     */
    forge_remote_id?: string;
    forge_url?: string;
    full_name?: string;
    gated?: boolean;
    id?: number;
    name?: string;
    netrc_only_trusted?: boolean;
    org_id?: number;
    owner?: string;
    pr_enabled?: boolean;
    private?: boolean;
    scm?: SCMKind;
    timeout?: number;
    trusted?: boolean;
    visibility?: RepoVisibility;
};

export type RepoPatch = {
    allow_deploy?: boolean;
    allow_pr?: boolean;
    cancel_previous_pipeline_events?: Array<WebhookEvent>;
    config_file?: string;
    gated?: boolean;
    netrc_only_trusted?: boolean;
    timeout?: number;
    trusted?: boolean;
    visibility?: string;
};

export type RepoVisibility = 'public' | 'private' | 'internal';

export type SCMKind = 'git' | 'hg' | 'fossil' | 'perforce';

export type Secret = {
    events?: Array<WebhookEvent>;
    id?: number;
    images?: Array<(string)>;
    name?: string;
    org_id?: number;
    repo_id?: number;
    value?: string;
};

export type StatusValue = 'skipped' | 'pending' | 'running' | 'success' | 'failure' | 'killed' | 'error' | 'blocked' | 'declined' | 'created';

export type Step = {
    end_time?: number;
    error?: string;
    exit_code?: number;
    id?: number;
    name?: string;
    pid?: number;
    pipeline_id?: number;
    ppid?: number;
    start_time?: number;
    state?: StatusValue;
    type?: StepType;
    uuid?: string;
};

export type StepType = 'clone' | 'service' | 'plugin' | 'commands' | 'cache';

export type Task = {
    agent_id?: number;
    data?: Array<(number)>;
    dep_status?: {
        [key: string]: StatusValue;
    };
    dependencies?: Array<(string)>;
    id?: string;
    labels?: {
        [key: string]: (string);
    };
    run_on?: Array<(string)>;
};

export type User = {
    /**
     * Admin indicates the user is a system administrator.
     *
     * NOTE: If the username is part of the WOODPECKER_ADMIN
     * environment variable, this value will be set to true on login.
     */
    admin?: boolean;
    /**
     * the avatar url for this user.
     */
    avatar_url?: string;
    /**
     * Email is the email address for this user.
     *
     * required: true
     */
    email?: string;
    forge_id?: number;
    /**
     * the id for this user.
     *
     * required: true
     */
    id?: number;
    /**
     * Login is the username for this user.
     *
     * required: true
     */
    login?: string;
    /**
     * OrgID is the of the user as model.Org.
     */
    org_id?: number;
};

export type WebhookEvent = 'push' | 'pull_request' | 'pull_request_closed' | 'tag' | 'release' | 'deployment' | 'cron' | 'manual';

export type model_ForgeType = 'github' | 'gitlab' | 'gitea' | 'forgejo' | 'bitbucket' | 'bitbucket-dc' | 'addon';

export type model_Workflow = {
    agent_id?: number;
    children?: Array<Step>;
    end_time?: number;
    environ?: {
        [key: string]: (string);
    };
    error?: string;
    id?: number;
    name?: string;
    pid?: number;
    pipeline_id?: number;
    platform?: string;
    start_time?: number;
    state?: StatusValue;
};

export type types_PipelineError = {
    data?: unknown;
    is_warning?: boolean;
    message?: string;
    type?: types_PipelineErrorType;
};

export type types_PipelineErrorType = 'linter' | 'deprecation' | 'compiler' | 'generic' | 'bad_habit';

export type GetAgentsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetAgentsResponse = Array<Agent>;

export type GetAgentsError = unknown;

export type PostAgentsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostAgentsResponse = Agent;

export type PostAgentsError = unknown;

export type DeleteAgentsByAgentData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the agent's id
         */
        agent: number;
    };
};

export type DeleteAgentsByAgentResponse = unknown;

export type DeleteAgentsByAgentError = unknown;

export type GetAgentsByAgentData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the agent's id
         */
        agent: number;
    };
};

export type GetAgentsByAgentResponse = Agent;

export type GetAgentsByAgentError = unknown;

export type PatchAgentsByAgentData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the agent's id
         */
        agent: number;
    };
};

export type PatchAgentsByAgentResponse = Agent;

export type PatchAgentsByAgentError = unknown;

export type GetAgentsByAgentTasksData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the agent's id
         */
        agent: number;
    };
};

export type GetAgentsByAgentTasksResponse = Array<Task>;

export type GetAgentsByAgentTasksError = unknown;

export type GetBadgesByRepoIdCcXmlData = {
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetBadgesByRepoIdCcXmlResponse = unknown;

export type GetBadgesByRepoIdCcXmlError = unknown;

export type GetBadgesByRepoIdStatusSvgData = {
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetBadgesByRepoIdStatusSvgResponse = unknown;

export type GetBadgesByRepoIdStatusSvgError = unknown;

export type GetDebugPprofData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetDebugPprofResponse = unknown;

export type GetDebugPprofError = unknown;

export type GetDebugPprofBlockData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetDebugPprofBlockResponse = unknown;

export type GetDebugPprofBlockError = unknown;

export type GetDebugPprofCmdlineData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetDebugPprofCmdlineResponse = unknown;

export type GetDebugPprofCmdlineError = unknown;

export type GetDebugPprofGoroutineData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * Use debug=2 as a query parameter to export in the same format as an un-recovered panic
         */
        debug?: number;
    };
};

export type GetDebugPprofGoroutineResponse = unknown;

export type GetDebugPprofGoroutineError = unknown;

export type GetDebugPprofHeapData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * You can specify gc=heap to run GC before taking the heap sample
         */
        gc?: string;
    };
};

export type GetDebugPprofHeapResponse = unknown;

export type GetDebugPprofHeapError = unknown;

export type GetDebugPprofProfileData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query: {
        /**
         * You can specify the duration in the seconds GET parameter.
         */
        seconds: number;
    };
};

export type GetDebugPprofProfileResponse = unknown;

export type GetDebugPprofProfileError = unknown;

export type GetDebugPprofSymbolData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetDebugPprofSymbolResponse = unknown;

export type GetDebugPprofSymbolError = unknown;

export type PostDebugPprofSymbolData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostDebugPprofSymbolResponse = unknown;

export type PostDebugPprofSymbolError = unknown;

export type GetDebugPprofThreadcreateData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetDebugPprofThreadcreateResponse = unknown;

export type GetDebugPprofThreadcreateError = unknown;

export type GetDebugPprofTraceData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query: {
        /**
         * You can specify the duration in the seconds GET parameter.
         */
        seconds: number;
    };
};

export type GetDebugPprofTraceResponse = unknown;

export type GetDebugPprofTraceError = unknown;

export type GetForgesData = {
    headers?: {
        /**
         * Insert your personal access token
         */
        Authorization?: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetForgesResponse = Array<Forge>;

export type GetForgesError = unknown;

export type PostForgesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostForgesResponse = Forge;

export type PostForgesError = unknown;

export type DeleteForgesByForgeIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the forge's id
         */
        forgeId: number;
    };
};

export type DeleteForgesByForgeIdResponse = unknown;

export type DeleteForgesByForgeIdError = unknown;

export type GetForgesByForgeIdData = {
    headers?: {
        /**
         * Insert your personal access token
         */
        Authorization?: string;
    };
    path: {
        /**
         * the forge's id
         */
        forgeId: number;
    };
};

export type GetForgesByForgeIdResponse = Forge;

export type GetForgesByForgeIdError = unknown;

export type PatchForgesByForgeIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the forge's id
         */
        forgeId: number;
    };
};

export type PatchForgesByForgeIdResponse = Forge;

export type PatchForgesByForgeIdError = unknown;

export type GetHealthzResponse = void;

export type GetHealthzError = unknown;

export type PostHookData = unknown;

export type PostHookResponse = unknown;

export type PostHookError = unknown;

export type GetLogLevelResponse = string & {
    'log-level'?: string;
};

export type GetLogLevelError = unknown;

export type PostLogLevelData = {
    /**
     * the new log level, one of <debug,trace,info,warn,error,fatal,panic,disabled>
     */
    body: string & {
    'log-level'?: string;
};
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostLogLevelResponse = string & {
    'log-level'?: string;
};

export type PostLogLevelError = unknown;

export type GetOrgLookupByOrgFullNameData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the organizations full name / slug
         */
        org_full_name: string;
    };
};

export type GetOrgLookupByOrgFullNameResponse = Org;

export type GetOrgLookupByOrgFullNameError = unknown;

export type GetOrgsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetOrgsResponse = Array<Org>;

export type GetOrgsError = unknown;

export type DeleteOrgsByIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        id: string;
    };
};

export type DeleteOrgsByIdResponse = void;

export type DeleteOrgsByIdError = unknown;

export type GetOrgsByOrgIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the organization's id
         */
        org_id: string;
    };
};

export type GetOrgsByOrgIdResponse = Array<Org>;

export type GetOrgsByOrgIdError = unknown;

export type GetOrgsByOrgIdPermissionsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the organization's id
         */
        org_id: string;
    };
};

export type GetOrgsByOrgIdPermissionsResponse = Array<OrgPerm>;

export type GetOrgsByOrgIdPermissionsError = unknown;

export type GetOrgsByOrgIdSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        org_id: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetOrgsByOrgIdSecretsResponse = Array<Secret>;

export type GetOrgsByOrgIdSecretsError = unknown;

export type PostOrgsByOrgIdSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        org_id: string;
    };
};

export type PostOrgsByOrgIdSecretsResponse = Secret;

export type PostOrgsByOrgIdSecretsError = unknown;

export type DeleteOrgsByOrgIdSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        org_id: string;
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type DeleteOrgsByOrgIdSecretsBySecretResponse = void;

export type DeleteOrgsByOrgIdSecretsBySecretError = unknown;

export type GetOrgsByOrgIdSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        org_id: string;
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type GetOrgsByOrgIdSecretsBySecretResponse = Secret;

export type GetOrgsByOrgIdSecretsBySecretError = unknown;

export type PatchOrgsByOrgIdSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the org's id
         */
        org_id: string;
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type PatchOrgsByOrgIdSecretsBySecretResponse = Secret;

export type PatchOrgsByOrgIdSecretsBySecretError = unknown;

export type GetPipelinesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetPipelinesResponse = Array<Feed>;

export type GetPipelinesError = unknown;

export type GetQueueInfoData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetQueueInfoResponse = {
    [key: string]: (string);
};

export type GetQueueInfoError = unknown;

export type GetQueueNorunningpipelinesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetQueueNorunningpipelinesResponse = void;

export type GetQueueNorunningpipelinesError = unknown;

export type PostQueuePauseData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostQueuePauseResponse = void;

export type PostQueuePauseError = unknown;

export type PostQueueResumeData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostQueueResumeResponse = void;

export type PostQueueResumeError = unknown;

export type GetReposData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * only list active repos
         */
        active?: boolean;
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposResponse = Array<Repo>;

export type GetReposError = unknown;

export type PostReposData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query: {
        /**
         * the id of a repository at the forge
         */
        forge_remote_id: string;
    };
};

export type PostReposResponse = Repo;

export type PostReposError = unknown;

export type GetReposLookupByRepoFullNameData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository full name / slug
         */
        repo_full_name: string;
    };
};

export type GetReposLookupByRepoFullNameResponse = Repo;

export type GetReposLookupByRepoFullNameError = unknown;

export type PostReposRepairData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostReposRepairResponse = void;

export type PostReposRepairError = unknown;

export type DeleteReposByRepoIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type DeleteReposByRepoIdResponse = Repo;

export type DeleteReposByRepoIdError = unknown;

export type GetReposByRepoIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdResponse = Repo;

export type GetReposByRepoIdError = unknown;

export type PatchReposByRepoIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PatchReposByRepoIdResponse = Repo;

export type PatchReposByRepoIdError = unknown;

export type GetReposByRepoIdBranchesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdBranchesResponse = Array<(string)>;

export type GetReposByRepoIdBranchesError = unknown;

export type PostReposByRepoIdChownData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdChownResponse = Repo;

export type PostReposByRepoIdChownError = unknown;

export type GetReposByRepoIdCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdCronResponse = Array<Cron>;

export type GetReposByRepoIdCronError = unknown;

export type PostReposByRepoIdCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdCronResponse = Cron;

export type PostReposByRepoIdCronError = unknown;

export type DeleteReposByRepoIdCronByCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the cron job id
         */
        cron: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type DeleteReposByRepoIdCronByCronResponse = void;

export type DeleteReposByRepoIdCronByCronError = unknown;

export type GetReposByRepoIdCronByCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the cron job id
         */
        cron: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdCronByCronResponse = Cron;

export type GetReposByRepoIdCronByCronError = unknown;

export type PatchReposByRepoIdCronByCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the cron job id
         */
        cron: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PatchReposByRepoIdCronByCronResponse = Cron;

export type PatchReposByRepoIdCronByCronError = unknown;

export type PostReposByRepoIdCronByCronData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the cron job id
         */
        cron: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdCronByCronResponse = Pipeline;

export type PostReposByRepoIdCronByCronError = unknown;

export type DeleteReposByRepoIdLogsByNumberData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type DeleteReposByRepoIdLogsByNumberResponse = void;

export type DeleteReposByRepoIdLogsByNumberError = unknown;

export type GetReposByRepoIdLogsByNumberByStepIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the step id
         */
        stepID: number;
    };
};

export type GetReposByRepoIdLogsByNumberByStepIdResponse = Array<LogEntry>;

export type GetReposByRepoIdLogsByNumberByStepIdError = unknown;

export type DeleteReposByRepoIdLogsByNumberByStepIdData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the step id
         */
        stepId: number;
    };
};

export type DeleteReposByRepoIdLogsByNumberByStepIdResponse = void;

export type DeleteReposByRepoIdLogsByNumberByStepIdError = unknown;

export type PostReposByRepoIdMoveData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query: {
        /**
         * the username to move the repository to
         */
        to: string;
    };
};

export type PostReposByRepoIdMoveResponse = void;

export type PostReposByRepoIdMoveError = unknown;

export type GetReposByRepoIdPermissionsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdPermissionsResponse = Perm;

export type GetReposByRepoIdPermissionsError = unknown;

export type GetReposByRepoIdPipelinesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * only return pipelines after this RFC3339 date
         */
        after?: string;
        /**
         * only return pipelines before this RFC3339 date
         */
        before?: string;
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdPipelinesResponse = Array<Pipeline>;

export type GetReposByRepoIdPipelinesError = unknown;

export type PostReposByRepoIdPipelinesData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdPipelinesResponse = Pipeline;

export type PostReposByRepoIdPipelinesError = unknown;

export type DeleteReposByRepoIdPipelinesByNumberData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type DeleteReposByRepoIdPipelinesByNumberResponse = void;

export type DeleteReposByRepoIdPipelinesByNumberError = unknown;

export type GetReposByRepoIdPipelinesByNumberData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline, OR 'latest'
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdPipelinesByNumberResponse = Pipeline;

export type GetReposByRepoIdPipelinesByNumberError = unknown;

export type PostReposByRepoIdPipelinesByNumberData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * override the target deploy value
         */
        deploy_to?: string;
        /**
         * override the event type
         */
        event?: string;
    };
};

export type PostReposByRepoIdPipelinesByNumberResponse = Pipeline;

export type PostReposByRepoIdPipelinesByNumberError = unknown;

export type PostReposByRepoIdPipelinesByNumberApproveData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdPipelinesByNumberApproveResponse = Pipeline;

export type PostReposByRepoIdPipelinesByNumberApproveError = unknown;

export type PostReposByRepoIdPipelinesByNumberCancelData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdPipelinesByNumberCancelResponse = unknown;

export type PostReposByRepoIdPipelinesByNumberCancelError = unknown;

export type GetReposByRepoIdPipelinesByNumberConfigData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdPipelinesByNumberConfigResponse = Array<Config>;

export type GetReposByRepoIdPipelinesByNumberConfigError = unknown;

export type PostReposByRepoIdPipelinesByNumberDeclineData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the number of the pipeline
         */
        number: number;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdPipelinesByNumberDeclineResponse = Pipeline;

export type PostReposByRepoIdPipelinesByNumberDeclineError = unknown;

export type GetReposByRepoIdPullRequestsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdPullRequestsResponse = Array<PullRequest>;

export type GetReposByRepoIdPullRequestsError = unknown;

export type GetReposByRepoIdRegistryData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdRegistryResponse = Array<Registry>;

export type GetReposByRepoIdRegistryError = unknown;

export type PostReposByRepoIdRegistryData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdRegistryResponse = Registry;

export type PostReposByRepoIdRegistryError = unknown;

export type DeleteReposByRepoIdRegistryByRegistryData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the registry name
         */
        registry: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type DeleteReposByRepoIdRegistryByRegistryResponse = void;

export type DeleteReposByRepoIdRegistryByRegistryError = unknown;

export type GetReposByRepoIdRegistryByRegistryData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the registry name
         */
        registry: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type GetReposByRepoIdRegistryByRegistryResponse = Registry;

export type GetReposByRepoIdRegistryByRegistryError = unknown;

export type PatchReposByRepoIdRegistryByRegistryData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the registry name
         */
        registry: string;
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PatchReposByRepoIdRegistryByRegistryResponse = Registry;

export type PatchReposByRepoIdRegistryByRegistryError = unknown;

export type PostReposByRepoIdRepairData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdRepairResponse = void;

export type PostReposByRepoIdRepairError = unknown;

export type GetReposByRepoIdSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetReposByRepoIdSecretsResponse = Array<Secret>;

export type GetReposByRepoIdSecretsError = unknown;

export type PostReposByRepoIdSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
    };
};

export type PostReposByRepoIdSecretsResponse = Secret;

export type PostReposByRepoIdSecretsError = unknown;

export type DeleteReposByRepoIdSecretsBySecretNameData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the secret name
         */
        secretName: string;
    };
};

export type DeleteReposByRepoIdSecretsBySecretNameResponse = void;

export type DeleteReposByRepoIdSecretsBySecretNameError = unknown;

export type GetReposByRepoIdSecretsBySecretNameData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the secret name
         */
        secretName: string;
    };
};

export type GetReposByRepoIdSecretsBySecretNameResponse = Secret;

export type GetReposByRepoIdSecretsBySecretNameError = unknown;

export type PatchReposByRepoIdSecretsBySecretNameData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the secret name
         */
        secretName: string;
    };
};

export type PatchReposByRepoIdSecretsBySecretNameResponse = Secret;

export type PatchReposByRepoIdSecretsBySecretNameError = unknown;

export type GetSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetSecretsResponse = Array<Secret>;

export type GetSecretsError = unknown;

export type PostSecretsData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostSecretsResponse = Secret;

export type PostSecretsError = unknown;

export type DeleteSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type DeleteSecretsBySecretResponse = void;

export type DeleteSecretsBySecretError = unknown;

export type GetSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type GetSecretsBySecretResponse = Secret;

export type GetSecretsBySecretError = unknown;

export type PatchSecretsBySecretData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the secret's name
         */
        secret: string;
    };
};

export type PatchSecretsBySecretResponse = Secret;

export type PatchSecretsBySecretError = unknown;

export type GetSignaturePublicKeyData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetSignaturePublicKeyResponse = unknown;

export type GetSignaturePublicKeyError = unknown;

export type GetStreamEventsResponse = unknown;

export type GetStreamEventsError = unknown;

export type GetStreamLogsByRepoIdByPipelineByStepIdData = {
    path: {
        /**
         * the number of the pipeline
         */
        pipeline: number;
        /**
         * the repository id
         */
        repo_id: number;
        /**
         * the step id
         */
        stepID: number;
    };
};

export type GetStreamLogsByRepoIdByPipelineByStepIdResponse = unknown;

export type GetStreamLogsByRepoIdByPipelineByStepIdError = unknown;

export type GetUserData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetUserResponse = User;

export type GetUserError = unknown;

export type GetUserFeedData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type GetUserFeedResponse = Array<Feed>;

export type GetUserFeedError = unknown;

export type GetUserReposData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * query all repos, including inactive ones
         */
        all?: boolean;
    };
};

export type GetUserReposResponse = Array<Repo>;

export type GetUserReposError = unknown;

export type DeleteUserTokenData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type DeleteUserTokenResponse = unknown;

export type DeleteUserTokenError = unknown;

export type PostUserTokenData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostUserTokenResponse = unknown;

export type PostUserTokenError = unknown;

export type GetUsersData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    query?: {
        /**
         * for response pagination, page offset number
         */
        page?: number;
        /**
         * for response pagination, max items per page
         */
        perPage?: number;
    };
};

export type GetUsersResponse = Array<User>;

export type GetUsersError = unknown;

export type PostUsersData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
};

export type PostUsersResponse = User;

export type PostUsersError = unknown;

export type DeleteUsersByLoginData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the user's login name
         */
        login: string;
    };
};

export type DeleteUsersByLoginResponse = void;

export type DeleteUsersByLoginError = unknown;

export type GetUsersByLoginData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the user's login name
         */
        login: string;
    };
};

export type GetUsersByLoginResponse = User;

export type GetUsersByLoginError = unknown;

export type PatchUsersByLoginData = {
    headers: {
        /**
         * Insert your personal access token
         */
        Authorization: string;
    };
    path: {
        /**
         * the user's login name
         */
        login: string;
    };
};

export type PatchUsersByLoginResponse = User;

export type PatchUsersByLoginError = unknown;

export type GetVersionResponse = string & {
    source?: string;
    version?: string;
};

export type GetVersionError = unknown;

export type $OpenApiTs = {
    '/agents': {
        get: {
            req: GetAgentsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Agent>;
            };
        };
        post: {
            req: PostAgentsData;
            res: {
                /**
                 * OK
                 */
                '200': Agent;
            };
        };
    };
    '/agents/{agent}': {
        delete: {
            req: DeleteAgentsByAgentData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
        get: {
            req: GetAgentsByAgentData;
            res: {
                /**
                 * OK
                 */
                '200': Agent;
            };
        };
        patch: {
            req: PatchAgentsByAgentData;
            res: {
                /**
                 * OK
                 */
                '200': Agent;
            };
        };
    };
    '/agents/{agent}/tasks': {
        get: {
            req: GetAgentsByAgentTasksData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Task>;
            };
        };
    };
    '/badges/{repo_id}/cc.xml': {
        get: {
            req: GetBadgesByRepoIdCcXmlData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/badges/{repo_id}/status.svg': {
        get: {
            req: GetBadgesByRepoIdStatusSvgData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof': {
        get: {
            req: GetDebugPprofData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/block': {
        get: {
            req: GetDebugPprofBlockData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/cmdline': {
        get: {
            req: GetDebugPprofCmdlineData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/goroutine': {
        get: {
            req: GetDebugPprofGoroutineData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/heap': {
        get: {
            req: GetDebugPprofHeapData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/profile': {
        get: {
            req: GetDebugPprofProfileData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/symbol': {
        get: {
            req: GetDebugPprofSymbolData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
        post: {
            req: PostDebugPprofSymbolData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/threadcreate': {
        get: {
            req: GetDebugPprofThreadcreateData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/debug/pprof/trace': {
        get: {
            req: GetDebugPprofTraceData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/forges': {
        get: {
            req: GetForgesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Forge>;
            };
        };
        post: {
            req: PostForgesData;
            res: {
                /**
                 * OK
                 */
                '200': Forge;
            };
        };
    };
    '/forges/{forgeId}': {
        delete: {
            req: DeleteForgesByForgeIdData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
        get: {
            req: GetForgesByForgeIdData;
            res: {
                /**
                 * OK
                 */
                '200': Forge;
            };
        };
        patch: {
            req: PatchForgesByForgeIdData;
            res: {
                /**
                 * OK
                 */
                '200': Forge;
            };
        };
    };
    '/healthz': {
        get: {
            res: {
                /**
                 * No Content
                 */
                '204': void;
                /**
                 * Internal Server Error
                 */
                '500': unknown;
            };
        };
    };
    '/hook': {
        post: {
            req: PostHookData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/log-level': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': string & {
    'log-level'?: string;
};
            };
        };
        post: {
            req: PostLogLevelData;
            res: {
                /**
                 * OK
                 */
                '200': string & {
    'log-level'?: string;
};
            };
        };
    };
    '/org/lookup/{org_full_name}': {
        get: {
            req: GetOrgLookupByOrgFullNameData;
            res: {
                /**
                 * OK
                 */
                '200': Org;
            };
        };
    };
    '/orgs': {
        get: {
            req: GetOrgsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Org>;
            };
        };
    };
    '/orgs/{id}': {
        delete: {
            req: DeleteOrgsByIdData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/orgs/{org_id}': {
        get: {
            req: GetOrgsByOrgIdData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Org>;
            };
        };
    };
    '/orgs/{org_id}/permissions': {
        get: {
            req: GetOrgsByOrgIdPermissionsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<OrgPerm>;
            };
        };
    };
    '/orgs/{org_id}/secrets': {
        get: {
            req: GetOrgsByOrgIdSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Secret>;
            };
        };
        post: {
            req: PostOrgsByOrgIdSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/orgs/{org_id}/secrets/{secret}': {
        delete: {
            req: DeleteOrgsByOrgIdSecretsBySecretData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetOrgsByOrgIdSecretsBySecretData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
        patch: {
            req: PatchOrgsByOrgIdSecretsBySecretData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/pipelines': {
        get: {
            req: GetPipelinesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Feed>;
            };
        };
    };
    '/queue/info': {
        get: {
            req: GetQueueInfoData;
            res: {
                /**
                 * OK
                 */
                '200': {
                    [key: string]: (string);
                };
            };
        };
    };
    '/queue/norunningpipelines': {
        get: {
            req: GetQueueNorunningpipelinesData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/queue/pause': {
        post: {
            req: PostQueuePauseData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/queue/resume': {
        post: {
            req: PostQueueResumeData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos': {
        get: {
            req: GetReposData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Repo>;
            };
        };
        post: {
            req: PostReposData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
    };
    '/repos/lookup/{repo_full_name}': {
        get: {
            req: GetReposLookupByRepoFullNameData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
    };
    '/repos/repair': {
        post: {
            req: PostReposRepairData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos/{repo_id}': {
        delete: {
            req: DeleteReposByRepoIdData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
        get: {
            req: GetReposByRepoIdData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
        patch: {
            req: PatchReposByRepoIdData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
    };
    '/repos/{repo_id}/branches': {
        get: {
            req: GetReposByRepoIdBranchesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<(string)>;
            };
        };
    };
    '/repos/{repo_id}/chown': {
        post: {
            req: PostReposByRepoIdChownData;
            res: {
                /**
                 * OK
                 */
                '200': Repo;
            };
        };
    };
    '/repos/{repo_id}/cron': {
        get: {
            req: GetReposByRepoIdCronData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Cron>;
            };
        };
        post: {
            req: PostReposByRepoIdCronData;
            res: {
                /**
                 * OK
                 */
                '200': Cron;
            };
        };
    };
    '/repos/{repo_id}/cron/{cron}': {
        delete: {
            req: DeleteReposByRepoIdCronByCronData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetReposByRepoIdCronByCronData;
            res: {
                /**
                 * OK
                 */
                '200': Cron;
            };
        };
        patch: {
            req: PatchReposByRepoIdCronByCronData;
            res: {
                /**
                 * OK
                 */
                '200': Cron;
            };
        };
        post: {
            req: PostReposByRepoIdCronByCronData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
    };
    '/repos/{repo_id}/logs/{number}': {
        delete: {
            req: DeleteReposByRepoIdLogsByNumberData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos/{repo_id}/logs/{number}/{stepID}': {
        get: {
            req: GetReposByRepoIdLogsByNumberByStepIdData;
            res: {
                /**
                 * OK
                 */
                '200': Array<LogEntry>;
            };
        };
    };
    '/repos/{repo_id}/logs/{number}/{stepId}': {
        delete: {
            req: DeleteReposByRepoIdLogsByNumberByStepIdData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos/{repo_id}/move': {
        post: {
            req: PostReposByRepoIdMoveData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos/{repo_id}/permissions': {
        get: {
            req: GetReposByRepoIdPermissionsData;
            res: {
                /**
                 * OK
                 */
                '200': Perm;
            };
        };
    };
    '/repos/{repo_id}/pipelines': {
        get: {
            req: GetReposByRepoIdPipelinesData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Pipeline>;
            };
        };
        post: {
            req: PostReposByRepoIdPipelinesData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
    };
    '/repos/{repo_id}/pipelines/{number}': {
        delete: {
            req: DeleteReposByRepoIdPipelinesByNumberData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetReposByRepoIdPipelinesByNumberData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
        post: {
            req: PostReposByRepoIdPipelinesByNumberData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
    };
    '/repos/{repo_id}/pipelines/{number}/approve': {
        post: {
            req: PostReposByRepoIdPipelinesByNumberApproveData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
    };
    '/repos/{repo_id}/pipelines/{number}/cancel': {
        post: {
            req: PostReposByRepoIdPipelinesByNumberCancelData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/repos/{repo_id}/pipelines/{number}/config': {
        get: {
            req: GetReposByRepoIdPipelinesByNumberConfigData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Config>;
            };
        };
    };
    '/repos/{repo_id}/pipelines/{number}/decline': {
        post: {
            req: PostReposByRepoIdPipelinesByNumberDeclineData;
            res: {
                /**
                 * OK
                 */
                '200': Pipeline;
            };
        };
    };
    '/repos/{repo_id}/pull_requests': {
        get: {
            req: GetReposByRepoIdPullRequestsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<PullRequest>;
            };
        };
    };
    '/repos/{repo_id}/registry': {
        get: {
            req: GetReposByRepoIdRegistryData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Registry>;
            };
        };
        post: {
            req: PostReposByRepoIdRegistryData;
            res: {
                /**
                 * OK
                 */
                '200': Registry;
            };
        };
    };
    '/repos/{repo_id}/registry/{registry}': {
        delete: {
            req: DeleteReposByRepoIdRegistryByRegistryData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetReposByRepoIdRegistryByRegistryData;
            res: {
                /**
                 * OK
                 */
                '200': Registry;
            };
        };
        patch: {
            req: PatchReposByRepoIdRegistryByRegistryData;
            res: {
                /**
                 * OK
                 */
                '200': Registry;
            };
        };
    };
    '/repos/{repo_id}/repair': {
        post: {
            req: PostReposByRepoIdRepairData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
    };
    '/repos/{repo_id}/secrets': {
        get: {
            req: GetReposByRepoIdSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Secret>;
            };
        };
        post: {
            req: PostReposByRepoIdSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/repos/{repo_id}/secrets/{secretName}': {
        delete: {
            req: DeleteReposByRepoIdSecretsBySecretNameData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetReposByRepoIdSecretsBySecretNameData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
        patch: {
            req: PatchReposByRepoIdSecretsBySecretNameData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/secrets': {
        get: {
            req: GetSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Secret>;
            };
        };
        post: {
            req: PostSecretsData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/secrets/{secret}': {
        delete: {
            req: DeleteSecretsBySecretData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetSecretsBySecretData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
        patch: {
            req: PatchSecretsBySecretData;
            res: {
                /**
                 * OK
                 */
                '200': Secret;
            };
        };
    };
    '/signature/public-key': {
        get: {
            req: GetSignaturePublicKeyData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/stream/events': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/stream/logs/{repo_id}/{pipeline}/{stepID}': {
        get: {
            req: GetStreamLogsByRepoIdByPipelineByStepIdData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/user': {
        get: {
            req: GetUserData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
    };
    '/user/feed': {
        get: {
            req: GetUserFeedData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Feed>;
            };
        };
    };
    '/user/repos': {
        get: {
            req: GetUserReposData;
            res: {
                /**
                 * OK
                 */
                '200': Array<Repo>;
            };
        };
    };
    '/user/token': {
        delete: {
            req: DeleteUserTokenData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
        post: {
            req: PostUserTokenData;
            res: {
                /**
                 * OK
                 */
                '200': unknown;
            };
        };
    };
    '/users': {
        get: {
            req: GetUsersData;
            res: {
                /**
                 * OK
                 */
                '200': Array<User>;
            };
        };
        post: {
            req: PostUsersData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
    };
    '/users/{login}': {
        delete: {
            req: DeleteUsersByLoginData;
            res: {
                /**
                 * No Content
                 */
                '204': void;
            };
        };
        get: {
            req: GetUsersByLoginData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
        patch: {
            req: PatchUsersByLoginData;
            res: {
                /**
                 * OK
                 */
                '200': User;
            };
        };
    };
    '/version': {
        get: {
            res: {
                /**
                 * OK
                 */
                '200': string & {
    source?: string;
    version?: string;
};
            };
        };
    };
};